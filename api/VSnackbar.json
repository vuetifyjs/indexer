{
  "displayName": "VSnackbar",
  "fileName": "VSnackbar",
  "pathName": "v-snackbar",
  "props": {
    "modelValue": {
      "text": "boolean | undefined",
      "source": "VOverlay",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "location": {
      "text": "Anchor | undefined",
      "source": "VOverlay-location-strategies",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "Anchor",
          "source": "vuetify/src/util/anchor.ts#L8-L14",
          "type": "ref",
          "ref": "Anchor",
          "formatted": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>"
        }
      ],
      "formatted": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
      "optional": false,
      "default": "'bottom'",
      "description": {
        "en": "Specifies the anchor point for positioning the component, using directional cues to align it either horizontally, vertically, or both.."
      },
      "descriptionSource": {
        "en": "VOverlay-activator"
      }
    },
    "absolute": {
      "text": "boolean | undefined",
      "source": "VOverlay",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Applies **position: absolute** to the content element."
      },
      "descriptionSource": {
        "en": "VOverlay"
      }
    },
    "color": {
      "text": "string | undefined",
      "source": "variant",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "height": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the height for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "rounded": {
      "text": "string | number | boolean | undefined",
      "source": "rounded",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "string | number | boolean\n",
      "optional": false,
      "description": {
        "en": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
      },
      "descriptionSource": {
        "en": "rounded"
      }
    },
    "tile": {
      "text": "boolean | undefined",
      "source": "rounded",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Removes any applied **border-radius** from the component."
      },
      "descriptionSource": {
        "en": "rounded"
      }
    },
    "theme": {
      "text": "string | undefined",
      "source": "theme",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Specify a theme for this component and all of its children."
      },
      "descriptionSource": {
        "en": "theme"
      }
    },
    "eager": {
      "text": "boolean | undefined",
      "source": "lazy",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "disabled": {
      "text": "boolean | undefined",
      "source": "VOverlay",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Removes the ability to click or target the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "maxHeight": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the maximum height for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "maxWidth": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the maximum width for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "minHeight": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the minimum height for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "minWidth": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the minimum width for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "width": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the width for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "variant": {
      "text": "\"flat\" | \"elevated\" | \"tonal\" | \"outlined\" | \"text\" | \"plain\" | undefined",
      "source": "variant",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "\"flat\"",
          "type": "string",
          "literal": "\"flat\"",
          "formatted": "\"flat\""
        },
        {
          "text": "\"elevated\"",
          "type": "string",
          "literal": "\"elevated\"",
          "formatted": "\"elevated\""
        },
        {
          "text": "\"tonal\"",
          "type": "string",
          "literal": "\"tonal\"",
          "formatted": "\"tonal\""
        },
        {
          "text": "\"outlined\"",
          "type": "string",
          "literal": "\"outlined\"",
          "formatted": "\"outlined\""
        },
        {
          "text": "\"text\"",
          "type": "string",
          "literal": "\"text\"",
          "formatted": "\"text\""
        },
        {
          "text": "\"plain\"",
          "type": "string",
          "literal": "\"plain\"",
          "formatted": "\"plain\""
        }
      ],
      "formatted": "'flat' | 'elevated' | 'tonal' | 'outlined' | 'text' | 'plain'\n",
      "optional": false,
      "default": "'elevated'",
      "description": {
        "en": "Applies a distinct style to the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "text": {
      "text": "string | undefined",
      "source": "VSnackbar",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Specify content text for the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "activator": {
      "text": "Element | (string & {}) | \"parent\" | ComponentPublicInstance | undefined",
      "source": "VOverlay-activator",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "Element",
          "source": "typescript/lib/lib.dom.d.ts#L1746-L2004",
          "type": "ref",
          "ref": "Element",
          "formatted": "Element"
        },
        {
          "text": "string & {}",
          "type": "allOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "{}",
              "type": "object",
              "properties": {},
              "formatted": "{  }"
            }
          ],
          "formatted": "string & {  }"
        },
        {
          "text": "\"parent\"",
          "type": "string",
          "literal": "\"parent\"",
          "formatted": "\"parent\""
        },
        {
          "text": "ComponentPublicInstance",
          "source": "@vue/runtime-core/dist/runtime-core.d.ts#L482-L501",
          "type": "ref",
          "ref": "ComponentPublicInstance",
          "formatted": "ComponentPublicInstance"
        }
      ],
      "formatted": "Element | (string & {}) | 'parent' | ComponentPublicInstance\n",
      "optional": false,
      "description": {
        "en": "Explicitly sets the overlay's activator."
      },
      "descriptionSource": {
        "en": "VOverlay-activator"
      }
    },
    "closeOnBack": {
      "text": "boolean | undefined",
      "source": "VOverlay",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": true,
      "description": {
        "en": "Closes the overlay content when the browser's back button is pressed or `$router.back()` is called, cancelling the original navigation. `persistent` overlays will cancel navigation and animate as if they were clicked outside instead of closing."
      },
      "descriptionSource": {
        "en": "VOverlay"
      }
    },
    "contained": {
      "text": "boolean | undefined",
      "source": "VOverlay",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Limits the size of the component and scrim to its offset parent. Implies `absolute` and `attach`. (Note: The parent element must have position: relative.)."
      },
      "descriptionSource": {
        "en": "VOverlay"
      }
    },
    "contentClass": {
      "text": "any",
      "source": "VOverlay",
      "type": "any",
      "formatted": "any\n",
      "optional": false,
      "description": {
        "en": "Applies a custom class to the detached element. This is useful because the content is moved to the beginning of the `v-app` component (unless the **attach** prop is provided) and is not targetable by classes passed directly on the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "contentProps": {
      "text": "any",
      "source": "VOverlay",
      "type": "any",
      "formatted": "any\n",
      "optional": false,
      "description": {
        "en": "Apply custom properties to the content."
      },
      "descriptionSource": {
        "en": "VOverlay-activator"
      }
    },
    "opacity": {
      "text": "string | number | undefined",
      "source": "VOverlay",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the overlay opacity."
      },
      "descriptionSource": {
        "en": "VOverlay"
      }
    },
    "zIndex": {
      "text": "string | number | undefined",
      "source": "VOverlay",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "default": 2000,
      "description": {
        "en": "The z-index used for the component."
      },
      "descriptionSource": {
        "en": "VOverlay"
      }
    },
    "target": {
      "text": "Element | (string & {}) | \"parent\" | \"cursor\" | ComponentPublicInstance | [x: number, y: number] | undefined",
      "source": "VOverlay-activator",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "Element",
          "source": "typescript/lib/lib.dom.d.ts#L1746-L2004",
          "type": "ref",
          "ref": "Element",
          "formatted": "Element"
        },
        {
          "text": "string & {}",
          "type": "allOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "{}",
              "type": "object",
              "properties": {},
              "formatted": "{  }"
            }
          ],
          "formatted": "string & {  }"
        },
        {
          "text": "\"parent\"",
          "type": "string",
          "literal": "\"parent\"",
          "formatted": "\"parent\""
        },
        {
          "text": "\"cursor\"",
          "type": "string",
          "literal": "\"cursor\"",
          "formatted": "\"cursor\""
        },
        {
          "text": "ComponentPublicInstance",
          "source": "@vue/runtime-core/dist/runtime-core.d.ts#L482-L501",
          "type": "ref",
          "ref": "ComponentPublicInstance",
          "formatted": "ComponentPublicInstance"
        },
        {
          "text": "[x: number, y: number]",
          "type": "array",
          "items": [
            {
              "text": "number",
              "type": "number",
              "formatted": "number"
            },
            {
              "text": "number",
              "type": "number",
              "formatted": "number"
            }
          ],
          "length": 2,
          "formatted": "[number, number]"
        }
      ],
      "formatted": "  | Element\n  | (string & {})\n  | 'parent'\n  | 'cursor'\n  | ComponentPublicInstance\n  | [number, number]\n",
      "optional": false,
      "description": {
        "en": "For locationStrategy=\"connected\", specify an element or array of x,y coordinates that the overlay should position itself relative to. This will be the activator element by default."
      },
      "descriptionSource": {
        "en": "VOverlay-activator"
      }
    },
    "activatorProps": {
      "text": "unknown",
      "source": "VOverlay-activator",
      "type": "unknown",
      "formatted": "unknown\n",
      "optional": false,
      "default": "{}",
      "description": {
        "en": "Apply custom properties to the activator."
      },
      "descriptionSource": {
        "en": "VOverlay-activator"
      }
    },
    "openOnClick": {
      "text": "boolean | undefined",
      "source": "VOverlay-activator",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "description": {
        "en": "Activate the component when the activator is clicked."
      },
      "descriptionSource": {
        "en": "VOverlay-activator"
      }
    },
    "openOnHover": {
      "text": "boolean | undefined",
      "source": "VOverlay-activator",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Activate the component when the activator is hovered."
      },
      "descriptionSource": {
        "en": "VOverlay-activator"
      }
    },
    "openOnFocus": {
      "text": "boolean | undefined",
      "source": "VOverlay-activator",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "description": {
        "en": "Activate the component when the activator is focused."
      },
      "descriptionSource": {
        "en": "VOverlay-activator"
      }
    },
    "closeOnContentClick": {
      "text": "boolean | undefined",
      "source": "VOverlay-activator",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Closes component when you click on its content."
      },
      "descriptionSource": {
        "en": "VOverlay-activator"
      }
    },
    "closeDelay": {
      "text": "string | number | undefined",
      "source": "delay",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Milliseconds to wait before closing component. Only applies to hover and focus events."
      },
      "descriptionSource": {
        "en": "delay"
      }
    },
    "openDelay": {
      "text": "string | number | undefined",
      "source": "delay",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Milliseconds to wait before opening component. Only applies to hover and focus events."
      },
      "descriptionSource": {
        "en": "delay"
      }
    },
    "locationStrategy": {
      "text": "\"static\" | \"connected\" | LocationStrategyFunction | undefined",
      "source": "VOverlay-location-strategies",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "\"static\"",
          "type": "string",
          "literal": "\"static\"",
          "formatted": "\"static\""
        },
        {
          "text": "\"connected\"",
          "type": "string",
          "literal": "\"connected\"",
          "formatted": "\"connected\""
        },
        {
          "text": "LocationStrategyFunction",
          "source": "vuetify/src/components/VOverlay/locationStrategies.ts#L38-L42",
          "type": "ref",
          "ref": "LocationStrategyFunction",
          "formatted": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/locationStrategies.ts#L38-L42\" target=\"_blank\">LocationStrategyFunction</a>"
        }
      ],
      "formatted": "'static' | 'connected' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/locationStrategies.ts#L38-L42\" target=\"_blank\">LocationStrategyFunction</a>\n",
      "optional": false,
      "default": "'static'",
      "description": {
        "en": "A function used to specifies how the component should position relative to its activator."
      },
      "descriptionSource": {
        "en": "VOverlay-location-strategies"
      }
    },
    "origin": {
      "text": "Anchor | \"auto\" | \"overlap\" | undefined",
      "source": "VOverlay-location-strategies",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "Anchor",
          "source": "vuetify/src/util/anchor.ts#L8-L14",
          "type": "ref",
          "ref": "Anchor",
          "formatted": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>"
        },
        {
          "text": "\"auto\"",
          "type": "string",
          "literal": "\"auto\"",
          "formatted": "\"auto\""
        },
        {
          "text": "\"overlap\"",
          "type": "string",
          "literal": "\"overlap\"",
          "formatted": "\"overlap\""
        }
      ],
      "formatted": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a> | 'auto' | 'overlap'\n",
      "optional": false,
      "default": "'auto'",
      "description": {
        "en": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "offset": {
      "text": "string | number | number[] | undefined",
      "source": "VOverlay-location-strategies",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        },
        {
          "text": "number[]",
          "source": "typescript/lib/lib.es5.d.ts#L4-L4",
          "type": "array",
          "items": [
            {
              "text": "number",
              "type": "number",
              "formatted": "number"
            }
          ],
          "formatted": "number[]"
        }
      ],
      "formatted": "string | number | number[]\n",
      "optional": false,
      "description": {
        "en": "A single value that offsets content away from the target based upon what side it is on."
      },
      "descriptionSource": {
        "en": "VOverlay-location-strategies"
      }
    },
    "transition": {
      "text": "string | boolean | (TransitionProps & { component?: Component | undefined; }) | undefined",
      "source": "transition",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        },
        {
          "text": "TransitionProps & { component?: Component | undefined; }",
          "type": "allOf",
          "items": [
            {
              "text": "TransitionProps",
              "source": "@vue/runtime-dom/dist/runtime-dom.d.ts#L8-L25",
              "type": "ref",
              "ref": "TransitionProps",
              "formatted": "TransitionProps"
            },
            {
              "text": "{ component?: Component | undefined; }",
              "source": "vuetify/src/composables/transition.ts#L10-L10",
              "type": "object",
              "properties": {
                "component": {
                  "text": "Component | undefined",
                  "type": "anyOf",
                  "items": [
                    {
                      "text": "undefined",
                      "type": "ref",
                      "ref": "",
                      "formatted": "undefined"
                    },
                    {
                      "text": "Component",
                      "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1409-L1409",
                      "type": "ref",
                      "ref": "Component",
                      "formatted": "Component"
                    }
                  ],
                  "formatted": "Component",
                  "optional": true
                }
              },
              "formatted": "{ component: Component }"
            }
          ],
          "formatted": "TransitionProps & { component: Component }"
        }
      ],
      "formatted": "string | boolean | (TransitionProps & { component: Component })\n",
      "optional": false,
      "default": "'v-snackbar-transition'",
      "description": {
        "en": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
      },
      "descriptionSource": {
        "en": "transition"
      }
    },
    "attach": {
      "text": "string | boolean | Element | undefined",
      "source": "VOverlay",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        },
        {
          "text": "Element",
          "source": "typescript/lib/lib.dom.d.ts#L1746-L2004",
          "type": "ref",
          "ref": "Element",
          "formatted": "Element"
        }
      ],
      "formatted": "string | boolean | Element\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Specifies which DOM element the overlay content should teleport to. Can be a direct element reference, querySelector string, or `true` to disable teleporting. Uses `body` by default."
      },
      "descriptionSource": {
        "en": "VOverlay"
      }
    },
    "vertical": {
      "text": "boolean | undefined",
      "source": "VSnackbar",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Stacks snackbar content on top of the actions (button)."
      },
      "descriptionSource": {
        "en": "VSnackbar"
      }
    },
    "position": {
      "text": "\"fixed\" | \"absolute\" | \"static\" | \"relative\" | \"sticky\" | undefined",
      "source": "position",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "\"fixed\"",
          "type": "string",
          "literal": "\"fixed\"",
          "formatted": "\"fixed\""
        },
        {
          "text": "\"absolute\"",
          "type": "string",
          "literal": "\"absolute\"",
          "formatted": "\"absolute\""
        },
        {
          "text": "\"static\"",
          "type": "string",
          "literal": "\"static\"",
          "formatted": "\"static\""
        },
        {
          "text": "\"relative\"",
          "type": "string",
          "literal": "\"relative\"",
          "formatted": "\"relative\""
        },
        {
          "text": "\"sticky\"",
          "type": "string",
          "literal": "\"sticky\"",
          "formatted": "\"sticky\""
        }
      ],
      "formatted": "'fixed' | 'absolute' | 'static' | 'relative' | 'sticky'\n",
      "optional": false,
      "description": {
        "en": "Sets the position for the component."
      },
      "descriptionSource": {
        "en": "position"
      }
    },
    "multiLine": {
      "text": "boolean | undefined",
      "source": "VSnackbar",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Gives the snackbar a larger minimum height."
      },
      "descriptionSource": {
        "en": "VSnackbar"
      }
    },
    "timer": {
      "text": "string | boolean | undefined",
      "source": "VSnackbar",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "string | boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Display a progress bar that counts down until the snackbar closes. Pass a string to set a custom color, otherwise uses `info`."
      },
      "descriptionSource": {
        "en": "VSnackbar"
      }
    },
    "timeout": {
      "text": "string | number | undefined",
      "source": "VSnackbar",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "default": 5000,
      "description": {
        "en": "Time (in milliseconds) to wait until snackbar is automatically hidden.  Use `-1` to keep open indefinitely (`0` in version < 2.3 ). It is recommended for this number to be between `4000` and `10000`. Changes to this property will reset the timeout."
      },
      "descriptionSource": {
        "en": "VSnackbar"
      }
    }
  },
  "events": {
    "update:modelValue": {
      "text": "[v: boolean]",
      "type": "array",
      "items": [
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "length": 1,
      "formatted": "[boolean]\n",
      "optional": false,
      "description": {
        "en": "Event that is emitted when the component's model changes."
      },
      "descriptionSource": {
        "en": "generic"
      }
    }
  },
  "slots": {
    "activator": {
      "text": "{ isActive: boolean; props: Record<string, any>; }",
      "source": "vuetify/src/components/VSnackbar/VSnackbar.tsx#L31-L31",
      "type": "object",
      "properties": {
        "isActive": {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean",
          "optional": false
        },
        "props": {
          "text": "Record<string, any>",
          "source": "typescript/lib/lib.es5.d.ts#L6-L6",
          "type": "record",
          "key": {
            "text": "string",
            "type": "string",
            "formatted": "string"
          },
          "value": {
            "text": "any",
            "type": "any",
            "formatted": "any"
          },
          "formatted": "Record<string, any>",
          "optional": false
        }
      },
      "formatted": "{ isActive: boolean; props: Record<string, any> }\n",
      "optional": false,
      "description": {
        "en": "When used, will activate the component when clicked (or hover for specific components). This manually stops the event propagation. Without this slot, if you open the component through its model, you will need to manually stop the event propagation."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "default": {
      "text": "never",
      "type": "never",
      "formatted": "never\n",
      "optional": false,
      "description": {
        "en": "The default Vue slot."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "actions": {
      "text": "{ isActive: Ref<boolean, boolean>; }",
      "source": "vuetify/src/components/VSnackbar/VSnackbar.tsx#L33-L33",
      "type": "object",
      "properties": {
        "isActive": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        }
      },
      "formatted": "{ isActive: Ref<boolean, boolean> }\n",
      "optional": false,
      "description": {
        "en": "Used to bind styles to [v-btn](/components/buttons) to match MD2 specification."
      },
      "descriptionSource": {
        "en": "VSnackbar"
      }
    },
    "text": {
      "text": "never",
      "type": "never",
      "formatted": "never\n",
      "optional": false,
      "description": {
        "en": "Slot for the component's text content."
      },
      "descriptionSource": {
        "en": "generic"
      }
    }
  },
  "exposed": {
    "activatorEl": {
      "text": "HTMLElement | undefined",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "HTMLElement",
          "source": "typescript/lib/lib.dom.d.ts#L4166-L4220",
          "type": "ref",
          "ref": "HTMLElement",
          "formatted": "HTMLElement"
        }
      ],
      "formatted": "HTMLElement\n",
      "optional": false,
      "description": {
        "en": "Ref to the current activator element."
      },
      "descriptionSource": {
        "en": "VSnackbar"
      }
    },
    "scrimEl": {
      "text": "HTMLElement | undefined",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "HTMLElement",
          "source": "typescript/lib/lib.dom.d.ts#L4166-L4220",
          "type": "ref",
          "ref": "HTMLElement",
          "formatted": "HTMLElement"
        }
      ],
      "formatted": "HTMLElement\n",
      "optional": false,
      "description": {
        "en": "Ref to the current scrim element."
      },
      "descriptionSource": {
        "en": "VSnackbar"
      }
    },
    "target": {
      "text": "HTMLElement | [x: number, y: number] | undefined",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "HTMLElement",
          "source": "typescript/lib/lib.dom.d.ts#L4166-L4220",
          "type": "ref",
          "ref": "HTMLElement",
          "formatted": "HTMLElement"
        },
        {
          "text": "[x: number, y: number]",
          "type": "array",
          "items": [
            {
              "text": "number",
              "type": "number",
              "formatted": "number"
            },
            {
              "text": "number",
              "type": "number",
              "formatted": "number"
            }
          ],
          "length": 2,
          "formatted": "[number, number]"
        }
      ],
      "formatted": "HTMLElement | [number, number]\n",
      "optional": false,
      "description": {
        "en": "Ref to the current target element."
      },
      "descriptionSource": {
        "en": "VOverlay"
      }
    },
    "animateClick": {
      "text": "() => void",
      "source": "vuetify/src/components/VOverlay/VOverlay.tsx#L262-L273",
      "type": "function",
      "parameters": [],
      "returnType": {
        "text": "void",
        "type": "void",
        "formatted": "void"
      },
      "formatted": "() => void\n",
      "optional": false,
      "description": {
        "en": "Function invoked when user clicks outside."
      },
      "descriptionSource": {
        "en": "VSnackbar"
      }
    },
    "contentEl": {
      "text": "HTMLElement | undefined",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "HTMLElement",
          "source": "typescript/lib/lib.dom.d.ts#L4166-L4220",
          "type": "ref",
          "ref": "HTMLElement",
          "formatted": "HTMLElement"
        }
      ],
      "formatted": "HTMLElement\n",
      "optional": false,
      "description": {
        "en": "Ref to the current content element."
      },
      "descriptionSource": {
        "en": "VSnackbar"
      }
    },
    "globalTop": {
      "text": "boolean",
      "type": "boolean",
      "formatted": "boolean\n",
      "optional": false,
      "description": {
        "en": "Used by activator to determine a components position in the global stack order."
      },
      "descriptionSource": {
        "en": "VSnackbar"
      }
    },
    "localTop": {
      "text": "boolean",
      "type": "boolean",
      "formatted": "boolean\n",
      "optional": false,
      "description": {
        "en": "Used by activator to determine a components position in the local stack order."
      },
      "descriptionSource": {
        "en": "VSnackbar"
      }
    },
    "updateLocation": {
      "text": "((e: Event) => void) | undefined",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "(e: Event) => void",
          "source": "vuetify/src/components/VOverlay/locationStrategies.ts#L82-L82",
          "type": "function",
          "parameters": [
            {
              "name": "e",
              "optional": false,
              "text": "Event",
              "source": "typescript/lib/lib.dom.d.ts#L2163-L2276",
              "type": "ref",
              "ref": "Event",
              "formatted": "Event"
            }
          ],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "(e: Event) => void"
        }
      ],
      "formatted": "(e: Event) => void\n",
      "optional": false,
      "description": {
        "en": "Function used for locationStrategy positioning."
      },
      "descriptionSource": {
        "en": "VSnackbar"
      }
    }
  },
  "sass": {
    "$snackbar-absolute-z-index": {
      "default": "1"
    },
    "$snackbar-action-margin": {
      "default": "8px"
    },
    "$snackbar-border-radius": {
      "default": "settings.$border-radius-root"
    },
    "$snackbar-plain-opacity": {
      "default": ".62"
    },
    "$snackbar-btn-padding": {
      "default": "0 8px"
    },
    "$snackbar-background": {
      "default": "rgb(var(--v-theme-surface-variant))"
    },
    "$snackbar-color": {
      "default": "rgb(var(--v-theme-on-surface-variant))"
    },
    "$snackbar-font-size": {
      "default": "tools.map-deep-get(settings.$typography, 'body-2', 'size')"
    },
    "$snackbar-font-weight": {
      "default": "tools.map-deep-get(settings.$typography, 'body-2', 'weight')"
    },
    "$snackbar-letter-spacing": {
      "default": "tools.map-deep-get(settings.$typography, 'body-2', 'letter-spacing')"
    },
    "$snackbar-line-height": {
      "default": "tools.map-deep-get(settings.$typography, 'body-2', 'line-height')"
    },
    "$snackbar-content-padding": {
      "default": "14px 16px"
    },
    "$snackbar-elevation": {
      "default": "6"
    },
    "$snackbar-multi-line-wrapper-min-height": {
      "default": "68px"
    },
    "$snackbar-transition-scale": {
      "default": ".8"
    },
    "$snackbar-vertical-action-margin-bottom": {
      "default": "8px"
    },
    "$snackbar-wrapper-margin": {
      "default": "8px"
    },
    "$snackbar-wrapper-max-width": {
      "default": "672px"
    },
    "$snackbar-wrapper-min-height": {
      "default": "48px"
    },
    "$snackbar-wrapper-min-width": {
      "default": "344px"
    },
    "$snackbar-wrapper-padding": {
      "default": "0"
    },
    "$snackbar-z-index": {
      "default": "10000"
    },
    "$snackbar-variants": {
      "default": "(\n  $snackbar-background,\n  $snackbar-color,\n  $snackbar-elevation,\n  $snackbar-plain-opacity,\n  'v-snackbar'\n)"
    }
  }
}