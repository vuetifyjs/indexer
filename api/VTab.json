{
  "displayName": "VTab",
  "fileName": "VTab",
  "pathName": "v-tab",
  "props": {
    "replace": {
      "text": "boolean | undefined",
      "source": "router",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Setting **replace** prop will call `router.replace()` instead of `router.push()` when clicked, so the navigation will not leave a history record. You can find more information about the [replace](https://router.vuejs.org/api/#replace) prop on the vue-router documentation."
      },
      "descriptionSource": {
        "en": "router"
      }
    },
    "fixed": {
      "text": "boolean | undefined",
      "source": "VTab",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Forces component to take up all available space up to their maximum width (300px), and centers it."
      },
      "descriptionSource": {
        "en": "VTab"
      }
    },
    "activeColor": {
      "text": "string | undefined",
      "source": "VBtn",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "The applied color when the component is in an active state."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "baseColor": {
      "text": "string | undefined",
      "source": "VBtn",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Sets the color of component when not focused."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "prependIcon": {
      "text": "IconValue | undefined",
      "source": "VBtn",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "IconValue",
          "source": "vuetify/src/composables/icons.tsx#L12-L15",
          "type": "anyOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "(string | [path: string, opacity: number])[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "[path: string, opacity: number]",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "number",
                      "type": "number",
                      "formatted": "number"
                    }
                  ],
                  "length": 2,
                  "formatted": "[string, number]"
                }
              ],
              "formatted": "(string | [string, number])[]"
            },
            {
              "text": "JSXComponent",
              "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
              "type": "anyOf",
              "items": [
                {
                  "text": "new () => any",
                  "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                  "type": "constructor",
                  "formatted": "new () => any"
                },
                {
                  "text": "FunctionalComponent<any, {}, any, {}>",
                  "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                  "type": "ref",
                  "ref": "FunctionalComponent",
                  "formatted": "FunctionalComponent"
                }
              ],
              "formatted": "(new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
      "optional": false,
      "description": {
        "en": "Creates a [v-icon](/api/v-icon/) component in the **prepend** slot before default content."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "appendIcon": {
      "text": "IconValue | undefined",
      "source": "VBtn",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "IconValue",
          "source": "vuetify/src/composables/icons.tsx#L12-L15",
          "type": "anyOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "(string | [path: string, opacity: number])[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "[path: string, opacity: number]",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "number",
                      "type": "number",
                      "formatted": "number"
                    }
                  ],
                  "length": 2,
                  "formatted": "[string, number]"
                }
              ],
              "formatted": "(string | [string, number])[]"
            },
            {
              "text": "JSXComponent",
              "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
              "type": "anyOf",
              "items": [
                {
                  "text": "new () => any",
                  "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                  "type": "constructor",
                  "formatted": "new () => any"
                },
                {
                  "text": "FunctionalComponent<any, {}, any, {}>",
                  "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                  "type": "ref",
                  "ref": "FunctionalComponent",
                  "formatted": "FunctionalComponent"
                }
              ],
              "formatted": "(new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
      "optional": false,
      "description": {
        "en": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "readonly": {
      "text": "boolean | undefined",
      "source": "VBtn",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Puts the button in a readonly state. Cannot be clicked or navigated to by keyboard."
      },
      "descriptionSource": {
        "en": "VBtn"
      }
    },
    "slim": {
      "text": "boolean | undefined",
      "source": "VBtn",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Reduces padding to 0 8px."
      },
      "descriptionSource": {
        "en": "VBtn"
      }
    },
    "stacked": {
      "text": "boolean | undefined",
      "source": "VBtn",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Displays the tab as a flex-column."
      },
      "descriptionSource": {
        "en": "VTab"
      }
    },
    "ripple": {
      "text": "boolean | { class: string; } | undefined",
      "source": "VBtn",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        },
        {
          "text": "{ class: string; }",
          "source": "vuetify/src/directives/ripple/index.ts#L28-L28",
          "type": "object",
          "properties": {
            "class": {
              "text": "string",
              "type": "string",
              "formatted": "string",
              "optional": false
            }
          },
          "formatted": "{ class: string }"
        }
      ],
      "formatted": "boolean | { class: string }\n",
      "optional": false,
      "default": true,
      "description": {
        "en": "Applies the [v-ripple](/directives/ripple) directive."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "value": {
      "text": "any",
      "source": "group-item",
      "type": "any",
      "formatted": "any\n",
      "optional": false,
      "description": {
        "en": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
      },
      "descriptionSource": {
        "en": "group-item"
      }
    },
    "text": {
      "text": "string | number | boolean | undefined",
      "source": "VBtn",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "string | number | boolean\n",
      "optional": false,
      "description": {
        "en": "Specify content text for the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "border": {
      "text": "string | number | boolean | undefined",
      "source": "border",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "string | number | boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
      },
      "descriptionSource": {
        "en": "border"
      }
    },
    "density": {
      "text": "Density | undefined",
      "source": "density",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "Density",
          "source": "vuetify/src/composables/density.ts#L12-L12",
          "type": "anyOf",
          "items": [
            {
              "text": "null",
              "type": "UNSUPPORTED",
              "formatted": "null"
            },
            {
              "text": "\"default\"",
              "type": "string",
              "literal": "\"default\"",
              "formatted": "\"default\""
            },
            {
              "text": "\"comfortable\"",
              "type": "string",
              "literal": "\"comfortable\"",
              "formatted": "\"comfortable\""
            },
            {
              "text": "\"compact\"",
              "type": "string",
              "literal": "\"compact\"",
              "formatted": "\"compact\""
            }
          ],
          "formatted": "\"default\" | \"comfortable\" | \"compact\""
        }
      ],
      "formatted": "'default' | 'comfortable' | 'compact'\n",
      "optional": false,
      "default": "'default'",
      "description": {
        "en": "Adjusts the vertical height used by the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "height": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the height for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "maxHeight": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the maximum height for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "maxWidth": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the maximum width for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "minHeight": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the minimum height for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "minWidth": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the minimum width for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "width": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the width for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "elevation": {
      "text": "string | number | undefined",
      "source": "elevation",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
      },
      "descriptionSource": {
        "en": "elevation"
      }
    },
    "disabled": {
      "text": "boolean | undefined",
      "source": "group-item",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Removes the ability to click or target the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "selectedClass": {
      "text": "string | undefined",
      "source": "group-item",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "default": "'v-tab--selected'",
      "description": {
        "en": "Configure the active CSS class applied when an item is selected."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "loading": {
      "text": "string | boolean | undefined",
      "source": "loader",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "string | boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
      },
      "descriptionSource": {
        "en": "loader"
      }
    },
    "rounded": {
      "text": "string | number | boolean | undefined",
      "source": "rounded",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "string | number | boolean\n",
      "optional": false,
      "description": {
        "en": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
      },
      "descriptionSource": {
        "en": "rounded"
      }
    },
    "tile": {
      "text": "boolean | undefined",
      "source": "rounded",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Removes any applied **border-radius** from the component."
      },
      "descriptionSource": {
        "en": "rounded"
      }
    },
    "href": {
      "text": "string | undefined",
      "source": "router",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Designates the component as anchor and applies the **href** attribute."
      },
      "descriptionSource": {
        "en": "router"
      }
    },
    "exact": {
      "text": "boolean | undefined",
      "source": "router",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Exactly match the link. Without this, '/' will match every route. You can find more information about the [**exact** prop](https://router.vuejs.org/api/#exact) on the vue-router documentation."
      },
      "descriptionSource": {
        "en": "router"
      }
    },
    "to": {
      "text": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
      "source": "router",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "RouteLocationAsRelativeGeneric",
          "source": "vue-router/dist/vue-router.d.ts#L606-L613",
          "type": "ref",
          "ref": "RouteLocationAsRelativeGeneric",
          "formatted": "RouteLocationAsRelativeGeneric"
        },
        {
          "text": "RouteLocationAsPathGeneric",
          "source": "vue-router/dist/vue-router.d.ts#L575-L580",
          "type": "ref",
          "ref": "RouteLocationAsPathGeneric",
          "formatted": "RouteLocationAsPathGeneric"
        }
      ],
      "formatted": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric\n",
      "optional": false,
      "description": {
        "en": "Denotes the target route of the link. You can find more information about the [**to** prop](https://router.vuejs.org/api/#to) on the vue-router documentation."
      },
      "descriptionSource": {
        "en": "router"
      }
    },
    "size": {
      "text": "string | number | undefined",
      "source": "size",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "default": "'default'",
      "description": {
        "en": "Sets the height and width of the component. Default unit is px. Can also use the following predefined sizes: **x-small**, **small**, **default**, **large**, and **x-large**."
      },
      "descriptionSource": {
        "en": "size"
      }
    },
    "tag": {
      "text": "string | JSXComponent | undefined",
      "source": "tag",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "JSXComponent",
          "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
          "type": "anyOf",
          "items": [
            {
              "text": "new () => any",
              "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
              "type": "constructor",
              "formatted": "new () => any"
            },
            {
              "text": "FunctionalComponent<any, {}, any, {}>",
              "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
              "type": "ref",
              "ref": "FunctionalComponent",
              "formatted": "FunctionalComponent"
            }
          ],
          "formatted": "(new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "string | (new () => any) | FunctionalComponent\n",
      "optional": false,
      "default": "'button'",
      "description": {
        "en": "Specify a custom tag used on the root element."
      },
      "descriptionSource": {
        "en": "tag"
      }
    },
    "theme": {
      "text": "string | undefined",
      "source": "theme",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Specify a theme for this component and all of its children."
      },
      "descriptionSource": {
        "en": "theme"
      }
    },
    "color": {
      "text": "string | undefined",
      "source": "variant",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "variant": {
      "text": "\"flat\" | \"text\" | \"elevated\" | \"tonal\" | \"outlined\" | \"plain\" | undefined",
      "source": "variant",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "\"flat\"",
          "type": "string",
          "literal": "\"flat\"",
          "formatted": "\"flat\""
        },
        {
          "text": "\"text\"",
          "type": "string",
          "literal": "\"text\"",
          "formatted": "\"text\""
        },
        {
          "text": "\"elevated\"",
          "type": "string",
          "literal": "\"elevated\"",
          "formatted": "\"elevated\""
        },
        {
          "text": "\"tonal\"",
          "type": "string",
          "literal": "\"tonal\"",
          "formatted": "\"tonal\""
        },
        {
          "text": "\"outlined\"",
          "type": "string",
          "literal": "\"outlined\"",
          "formatted": "\"outlined\""
        },
        {
          "text": "\"plain\"",
          "type": "string",
          "literal": "\"plain\"",
          "formatted": "\"plain\""
        }
      ],
      "formatted": "'flat' | 'text' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
      "optional": false,
      "default": "'text'",
      "description": {
        "en": "Applies a distinct style to the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "icon": {
      "text": "boolean | IconValue | undefined",
      "source": "VBtn",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        },
        {
          "text": "IconValue",
          "source": "vuetify/src/composables/icons.tsx#L12-L15",
          "type": "anyOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "(string | [path: string, opacity: number])[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "[path: string, opacity: number]",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "number",
                      "type": "number",
                      "formatted": "number"
                    }
                  ],
                  "length": 2,
                  "formatted": "[string, number]"
                }
              ],
              "formatted": "(string | [string, number])[]"
            },
            {
              "text": "JSXComponent",
              "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
              "type": "anyOf",
              "items": [
                {
                  "text": "new () => any",
                  "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                  "type": "constructor",
                  "formatted": "new () => any"
                },
                {
                  "text": "FunctionalComponent<any, {}, any, {}>",
                  "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                  "type": "ref",
                  "ref": "FunctionalComponent",
                  "formatted": "FunctionalComponent"
                }
              ],
              "formatted": "(new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "  | boolean\n  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Apply a specific icon using the [v-icon](/components/icons/) component. The button will become _round_."
      },
      "descriptionSource": {
        "en": "VBtn"
      }
    },
    "direction": {
      "text": "\"vertical\" | \"horizontal\" | undefined",
      "source": "VTab",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "\"vertical\"",
          "type": "string",
          "literal": "\"vertical\"",
          "formatted": "\"vertical\""
        },
        {
          "text": "\"horizontal\"",
          "type": "string",
          "literal": "\"horizontal\"",
          "formatted": "\"horizontal\""
        }
      ],
      "formatted": "'vertical' | 'horizontal'\n",
      "optional": false,
      "default": "'horizontal'",
      "description": {
        "en": "Changes the direction of the tabs. Can be either `horizontal` or `vertical`."
      },
      "descriptionSource": {
        "en": "VTab"
      }
    },
    "sliderColor": {
      "text": "string | undefined",
      "source": "VTab",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Applies specified color to the slider when active on that component - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
      },
      "descriptionSource": {
        "en": "VTab"
      }
    },
    "hideSlider": {
      "text": "boolean | undefined",
      "source": "VTab",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Hides the active tab slider component (no exit or enter animation)."
      },
      "descriptionSource": {
        "en": "VTab"
      }
    }
  },
  "events": {},
  "slots": {
    "default": {
      "text": "never",
      "type": "never",
      "formatted": "never\n",
      "optional": false,
      "description": {
        "en": "The default Vue slot."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "prepend": {
      "text": "never",
      "type": "never",
      "formatted": "never\n",
      "optional": false,
      "description": {
        "en": "Adds an item outside the input and before input content."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "append": {
      "text": "never",
      "type": "never",
      "formatted": "never\n",
      "optional": false,
      "description": {
        "en": "Adds an item inside the input and after input content."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "loader": {
      "text": "never",
      "type": "never",
      "formatted": "never\n",
      "optional": false,
      "description": {
        "en": "Slot for custom loader (displayed when [loading](#props-loading) prop is equal to true)."
      },
      "descriptionSource": {
        "en": "generic"
      }
    }
  },
  "exposed": {
    "group": {
      "text": "{ id: string; isSelected: boolean; isFirst: boolean; isLast: boolean; toggle: () => void; select: (value: boolean) => void; selectedClass: false | (string | undefined)[]; value: unknown; disabled: boolean | undefined; group: { register: (item: GroupItem, cmp: ComponentInternalInstance) => void; unregister: (id: string) => void; select: (id: string, value: boolean) => void; selected: readonly string[]; isSelected: (id: string) => boolean; prev: () => void; next: () => void; selectedClass: string | undefined; items: { id: string; value: unknown; disabled: boolean | undefined; }[]; disabled: boolean | undefined; getItemIndex: (value: unknown) => number; }; } | null",
      "type": "anyOf",
      "items": [
        {
          "text": "null",
          "type": "UNSUPPORTED",
          "formatted": "null"
        },
        {
          "text": "{ id: string; isSelected: boolean; isFirst: boolean; isLast: boolean; toggle: () => void; select: (value: boolean) => void; selectedClass: false | (string | undefined)[]; value: unknown; disabled: boolean | undefined; group: { register: (item: GroupItem, cmp: ComponentInternalInstance) => void; unregister: (id: string) => void; select: (id: string, value: boolean) => void; selected: readonly string[]; isSelected: (id: string) => boolean; prev: () => void; next: () => void; selectedClass: string | undefined; items: { id: string; value: unknown; disabled: boolean | undefined; }[]; disabled: boolean | undefined; getItemIndex: (value: unknown) => number; }; }",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L636-L638",
          "type": "ref",
          "ref": "__type",
          "formatted": "{ id: string; isSelected: boolean; isFirst: boolean; isLast: boolean; toggle: () => void; select: (value: boolean) => void; selectedClass: false | (string | undefined)[]; value: unknown; disabled: boolean | undefined; group: { register: (item: GroupItem, cmp: ComponentInternalInstance) => void; unregister: (id: string) => void; select: (id: string, value: boolean) => void; selected: readonly string[]; isSelected: (id: string) => boolean; prev: () => void; next: () => void; selectedClass: string | undefined; items: { id: string; value: unknown; disabled: boolean | undefined; }[]; disabled: boolean | undefined; getItemIndex: (value: unknown) => number; }; }"
        }
      ],
      "formatted": "{\n  id: string\n  isSelected: boolean\n  isFirst: boolean\n  isLast: boolean\n  toggle: () => void\n  select: (value: boolean) => void\n  selectedClass: false | (string | undefined)[]\n  value: unknown\n  disabled: boolean | undefined\n  group: {\n    register: (item: GroupItem, cmp: ComponentInternalInstance) => void\n    unregister: (id: string) => void\n    select: (id: string, value: boolean) => void\n    selected: readonly string[]\n    isSelected: (id: string) => boolean\n    prev: () => void\n    next: () => void\n    selectedClass: string | undefined\n    items: { id: string; value: unknown; disabled: boolean | undefined }[]\n    disabled: boolean | undefined\n    getItemIndex: (value: unknown) => number\n  }\n}\n",
      "optional": false,
      "description": {
        "en": "Internal representation when used in VBtnToggle."
      },
      "descriptionSource": {
        "en": "VBtn"
      }
    }
  },
  "sass": {}
}