{
  "displayName": "VSwitch",
  "fileName": "VSwitch",
  "pathName": "v-switch",
  "props": {
    "flat": {
      "text": "boolean | undefined",
      "source": "VSwitch",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Display component without elevation. Default elevation for thumb is 4dp, `flat` resets it."
      },
      "descriptionSource": {
        "en": "VSwitch"
      }
    },
    "type": {
      "text": "string | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Provides the default type for children selection controls."
      },
      "descriptionSource": {
        "en": "SelectionControlGroup"
      }
    },
    "name": {
      "text": "string | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Sets the component's name attribute."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "error": {
      "text": "boolean | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Puts the input in a manual error state."
      },
      "descriptionSource": {
        "en": "SelectionControlGroup"
      }
    },
    "label": {
      "text": "string | undefined",
      "source": "VSelectionControl",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "color": {
      "text": "string | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "inline": {
      "text": "boolean | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Puts children inputs into a row."
      },
      "descriptionSource": {
        "en": "SelectionControlGroup"
      }
    },
    "modelValue": {
      "text": "unknown",
      "source": "SelectionControlGroup",
      "type": "unknown",
      "formatted": "unknown\n",
      "optional": false,
      "description": {
        "en": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "theme": {
      "text": "string | undefined",
      "source": "theme",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Specify a theme for this component and all of its children."
      },
      "descriptionSource": {
        "en": "theme"
      }
    },
    "inset": {
      "text": "boolean | undefined",
      "source": "VSwitch",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Enlarge the `v-switch` track to encompass the thumb."
      },
      "descriptionSource": {
        "en": "VSwitch"
      }
    },
    "disabled": {
      "text": "boolean | null | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "null",
          "type": "UNSUPPORTED",
          "formatted": "null"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": "null",
      "description": {
        "en": "Removes the ability to click or target the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "maxWidth": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the maximum width for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "minWidth": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the minimum width for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "width": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the width for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "id": {
      "text": "string | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Sets the DOM id on the component."
      },
      "descriptionSource": {
        "en": "SelectionControlGroup"
      }
    },
    "baseColor": {
      "text": "string | undefined",
      "source": "VSelectionControl",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Sets the color of the input when it is not focused."
      },
      "descriptionSource": {
        "en": "VSelectionControl"
      }
    },
    "density": {
      "text": "Density | undefined",
      "source": "density",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "Density",
          "source": "vuetify/src/composables/density.ts#L12-L12",
          "type": "anyOf",
          "items": [
            {
              "text": "null",
              "type": "UNSUPPORTED",
              "formatted": "null"
            },
            {
              "text": "\"default\"",
              "type": "string",
              "literal": "\"default\"",
              "formatted": "\"default\""
            },
            {
              "text": "\"comfortable\"",
              "type": "string",
              "literal": "\"comfortable\"",
              "formatted": "\"comfortable\""
            },
            {
              "text": "\"compact\"",
              "type": "string",
              "literal": "\"compact\"",
              "formatted": "\"compact\""
            }
          ],
          "formatted": "\"default\" | \"comfortable\" | \"compact\""
        }
      ],
      "formatted": "'default' | 'comfortable' | 'compact'\n",
      "optional": false,
      "default": "'default'",
      "description": {
        "en": "Adjusts the vertical height used by the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "multiple": {
      "text": "boolean | null | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "null",
          "type": "UNSUPPORTED",
          "formatted": "null"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": "null",
      "description": {
        "en": "Changes expected model to an array."
      },
      "descriptionSource": {
        "en": "VSwitch"
      }
    },
    "appendIcon": {
      "text": "IconValue | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "IconValue",
          "source": "vuetify/src/composables/icons.tsx#L12-L15",
          "type": "anyOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "(string | [path: string, opacity: number])[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "[path: string, opacity: number]",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "number",
                      "type": "number",
                      "formatted": "number"
                    }
                  ],
                  "length": 2,
                  "formatted": "[string, number]"
                }
              ],
              "formatted": "(string | [string, number])[]"
            },
            {
              "text": "JSXComponent",
              "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
              "type": "anyOf",
              "items": [
                {
                  "text": "new () => any",
                  "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                  "type": "constructor",
                  "formatted": "new () => any"
                },
                {
                  "text": "FunctionalComponent<any, {}, any, {}>",
                  "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                  "type": "ref",
                  "ref": "FunctionalComponent",
                  "formatted": "FunctionalComponent"
                }
              ],
              "formatted": "(new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
      "optional": false,
      "description": {
        "en": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "prependIcon": {
      "text": "IconValue | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "IconValue",
          "source": "vuetify/src/composables/icons.tsx#L12-L15",
          "type": "anyOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "(string | [path: string, opacity: number])[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "[path: string, opacity: number]",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "number",
                      "type": "number",
                      "formatted": "number"
                    }
                  ],
                  "length": 2,
                  "formatted": "[string, number]"
                }
              ],
              "formatted": "(string | [string, number])[]"
            },
            {
              "text": "JSXComponent",
              "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
              "type": "anyOf",
              "items": [
                {
                  "text": "new () => any",
                  "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                  "type": "constructor",
                  "formatted": "new () => any"
                },
                {
                  "text": "FunctionalComponent<any, {}, any, {}>",
                  "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                  "type": "ref",
                  "ref": "FunctionalComponent",
                  "formatted": "FunctionalComponent"
                }
              ],
              "formatted": "(new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
      "optional": false,
      "description": {
        "en": "Prepends an icon to the component, uses the same syntax as `v-icon`."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "ripple": {
      "text": "boolean | { class: string; } | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        },
        {
          "text": "{ class: string; }",
          "source": "vuetify/src/directives/ripple/index.ts#L28-L28",
          "type": "object",
          "properties": {
            "class": {
              "text": "string",
              "type": "string",
              "formatted": "string",
              "optional": false
            }
          },
          "formatted": "{ class: string }"
        }
      ],
      "formatted": "boolean | { class: string }\n",
      "optional": false,
      "default": true,
      "description": {
        "en": "Applies the [v-ripple](/directives/ripple) directive."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "value": {
      "text": "any",
      "source": "VSelectionControl",
      "type": "any",
      "formatted": "any\n",
      "optional": false,
      "description": {
        "en": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
      },
      "descriptionSource": {
        "en": "VSelectionControl"
      }
    },
    "loading": {
      "text": "string | boolean | undefined",
      "source": "VSwitch",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "string | boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Displays circular progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - primary, secondary, success, info, warning, error) or a Boolean which uses the component color (set by color prop - if it's supported by the component) or the primary color."
      },
      "descriptionSource": {
        "en": "VSwitch"
      }
    },
    "indeterminate": {
      "text": "boolean | undefined",
      "source": "VSwitch",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Sets an indeterminate state for the switch."
      },
      "descriptionSource": {
        "en": "VSwitch"
      }
    },
    "trueValue": {
      "text": "any",
      "source": "VSelectionControl",
      "type": "any",
      "formatted": "any\n",
      "optional": false,
      "description": {
        "en": "Sets value for truthy state."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "falseValue": {
      "text": "any",
      "source": "VSelectionControl",
      "type": "any",
      "formatted": "any\n",
      "optional": false,
      "description": {
        "en": "Sets value for falsy state."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "defaultsTarget": {
      "text": "string | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "The target component to provide defaults values for."
      },
      "descriptionSource": {
        "en": "SelectionControlGroup"
      }
    },
    "falseIcon": {
      "text": "IconValue | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "IconValue",
          "source": "vuetify/src/composables/icons.tsx#L12-L15",
          "type": "anyOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "(string | [path: string, opacity: number])[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "[path: string, opacity: number]",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "number",
                      "type": "number",
                      "formatted": "number"
                    }
                  ],
                  "length": 2,
                  "formatted": "[string, number]"
                }
              ],
              "formatted": "(string | [string, number])[]"
            },
            {
              "text": "JSXComponent",
              "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
              "type": "anyOf",
              "items": [
                {
                  "text": "new () => any",
                  "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                  "type": "constructor",
                  "formatted": "new () => any"
                },
                {
                  "text": "FunctionalComponent<any, {}, any, {}>",
                  "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                  "type": "ref",
                  "ref": "FunctionalComponent",
                  "formatted": "FunctionalComponent"
                }
              ],
              "formatted": "(new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
      "optional": false,
      "description": {
        "en": "The icon used when inactive."
      },
      "descriptionSource": {
        "en": "SelectionControlGroup"
      }
    },
    "trueIcon": {
      "text": "IconValue | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "IconValue",
          "source": "vuetify/src/composables/icons.tsx#L12-L15",
          "type": "anyOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "(string | [path: string, opacity: number])[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "[path: string, opacity: number]",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "number",
                      "type": "number",
                      "formatted": "number"
                    }
                  ],
                  "length": 2,
                  "formatted": "[string, number]"
                }
              ],
              "formatted": "(string | [string, number])[]"
            },
            {
              "text": "JSXComponent",
              "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
              "type": "anyOf",
              "items": [
                {
                  "text": "new () => any",
                  "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                  "type": "constructor",
                  "formatted": "new () => any"
                },
                {
                  "text": "FunctionalComponent<any, {}, any, {}>",
                  "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                  "type": "ref",
                  "ref": "FunctionalComponent",
                  "formatted": "FunctionalComponent"
                }
              ],
              "formatted": "(new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
      "optional": false,
      "description": {
        "en": "The icon used when active."
      },
      "descriptionSource": {
        "en": "SelectionControlGroup"
      }
    },
    "readonly": {
      "text": "boolean | null | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "null",
          "type": "UNSUPPORTED",
          "formatted": "null"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": "null",
      "description": {
        "en": "Puts input in readonly state."
      },
      "descriptionSource": {
        "en": "SelectionControlGroup"
      }
    },
    "valueComparator": {
      "text": "typeof deepEqual | undefined",
      "source": "SelectionControlGroup",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "typeof deepEqual",
          "source": "vuetify/src/util/helpers.ts#L46-L71",
          "type": "function",
          "parameters": [
            {
              "name": "a",
              "optional": false,
              "text": "any",
              "type": "any",
              "formatted": "any"
            },
            {
              "name": "b",
              "optional": false,
              "text": "any",
              "type": "any",
              "formatted": "any"
            }
          ],
          "returnType": {
            "text": "boolean",
            "type": "boolean",
            "formatted": "boolean"
          },
          "formatted": "(a: any, b: any) => boolean"
        }
      ],
      "formatted": "(a: any, b: any) => boolean\n",
      "optional": false,
      "description": {
        "en": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "centerAffix": {
      "text": "boolean | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": true,
      "description": {
        "en": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "glow": {
      "text": "boolean | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Makes prepend/append icons full opacity when the input is focused and apply color."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "iconColor": {
      "text": "string | boolean | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "string | boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Sets the color of the prepend/append icons."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "hideSpinButtons": {
      "text": "boolean | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Hides spin buttons on the input when type is set to `number`."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "hint": {
      "text": "string | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "persistentHint": {
      "text": "boolean | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Forces [hint](#props-hint) to always be visible."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "messages": {
      "text": "string | readonly string[] | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "readonly string[]",
          "source": "typescript/lib/lib.es5.d.ts#L4-L4",
          "type": "array",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            }
          ],
          "formatted": "string[]"
        }
      ],
      "formatted": "string | string[]\n",
      "optional": false,
      "default": "[]",
      "description": {
        "en": "Displays a list of messages or a single message if using a string."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "direction": {
      "text": "\"horizontal\" | \"vertical\" | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "\"horizontal\"",
          "type": "string",
          "literal": "\"horizontal\"",
          "formatted": "\"horizontal\""
        },
        {
          "text": "\"vertical\"",
          "type": "string",
          "literal": "\"vertical\"",
          "formatted": "\"vertical\""
        }
      ],
      "formatted": "'horizontal' | 'vertical'\n",
      "optional": false,
      "default": "'horizontal'",
      "description": {
        "en": "Changes the direction of the input."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "errorMessages": {
      "text": "string | readonly string[] | null | undefined",
      "source": "validation",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "null",
          "type": "UNSUPPORTED",
          "formatted": "null"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "readonly string[]",
          "source": "typescript/lib/lib.es5.d.ts#L4-L4",
          "type": "array",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            }
          ],
          "formatted": "string[]"
        }
      ],
      "formatted": "string | string[]\n",
      "optional": false,
      "default": "[]",
      "description": {
        "en": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
      },
      "descriptionSource": {
        "en": "validation"
      }
    },
    "maxErrors": {
      "text": "string | number | undefined",
      "source": "validation",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "default": 1,
      "description": {
        "en": "Control the maximum number of shown errors from validation."
      },
      "descriptionSource": {
        "en": "validation"
      }
    },
    "rules": {
      "text": "readonly ValidationRule[] | undefined",
      "source": "validation",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "readonly ValidationRule[]",
          "source": "typescript/lib/lib.es5.d.ts#L4-L4",
          "type": "array",
          "items": [
            {
              "text": "ValidationRule",
              "source": "vuetify/src/composables/validation.ts#L17-L21",
              "type": "ref",
              "ref": "ValidationRule",
              "formatted": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>"
            }
          ],
          "formatted": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]"
        }
      ],
      "formatted": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
      "optional": false,
      "default": "[]",
      "description": {
        "en": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
      },
      "descriptionSource": {
        "en": "validation"
      }
    },
    "validateOn": {
      "text": "ValidateOn | undefined",
      "source": "validation",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "ValidateOn",
          "source": "vuetify/src/composables/validation.ts#L24-L31",
          "type": "anyOf",
          "items": [
            {
              "text": "\"eager\"",
              "type": "string",
              "literal": "\"eager\"",
              "formatted": "\"eager\""
            },
            {
              "text": "\"lazy\"",
              "type": "string",
              "literal": "\"lazy\"",
              "formatted": "\"lazy\""
            },
            {
              "text": "ValidateOnValue",
              "source": "vuetify/src/composables/validation.ts#L23-L23",
              "type": "anyOf",
              "items": [
                {
                  "text": "\"blur\"",
                  "type": "string",
                  "literal": "\"blur\"",
                  "formatted": "\"blur\""
                },
                {
                  "text": "\"input\"",
                  "type": "string",
                  "literal": "\"input\"",
                  "formatted": "\"input\""
                },
                {
                  "text": "\"submit\"",
                  "type": "string",
                  "literal": "\"submit\"",
                  "formatted": "\"submit\""
                },
                {
                  "text": "\"invalid-input\"",
                  "type": "string",
                  "literal": "\"invalid-input\"",
                  "formatted": "\"invalid-input\""
                }
              ],
              "formatted": "\"blur\" | \"input\" | \"submit\" | \"invalid-input\""
            },
            {
              "text": "\"blur lazy\"",
              "type": "string",
              "literal": "\"blur lazy\"",
              "formatted": "\"blur lazy\""
            },
            {
              "text": "\"input lazy\"",
              "type": "string",
              "literal": "\"input lazy\"",
              "formatted": "\"input lazy\""
            },
            {
              "text": "\"submit lazy\"",
              "type": "string",
              "literal": "\"submit lazy\"",
              "formatted": "\"submit lazy\""
            },
            {
              "text": "\"invalid-input lazy\"",
              "type": "string",
              "literal": "\"invalid-input lazy\"",
              "formatted": "\"invalid-input lazy\""
            },
            {
              "text": "\"blur eager\"",
              "type": "string",
              "literal": "\"blur eager\"",
              "formatted": "\"blur eager\""
            },
            {
              "text": "\"input eager\"",
              "type": "string",
              "literal": "\"input eager\"",
              "formatted": "\"input eager\""
            },
            {
              "text": "\"submit eager\"",
              "type": "string",
              "literal": "\"submit eager\"",
              "formatted": "\"submit eager\""
            },
            {
              "text": "\"invalid-input eager\"",
              "type": "string",
              "literal": "\"invalid-input eager\"",
              "formatted": "\"invalid-input eager\""
            },
            {
              "text": "\"lazy blur\"",
              "type": "string",
              "literal": "\"lazy blur\"",
              "formatted": "\"lazy blur\""
            },
            {
              "text": "\"lazy input\"",
              "type": "string",
              "literal": "\"lazy input\"",
              "formatted": "\"lazy input\""
            },
            {
              "text": "\"lazy submit\"",
              "type": "string",
              "literal": "\"lazy submit\"",
              "formatted": "\"lazy submit\""
            },
            {
              "text": "\"lazy invalid-input\"",
              "type": "string",
              "literal": "\"lazy invalid-input\"",
              "formatted": "\"lazy invalid-input\""
            },
            {
              "text": "\"eager blur\"",
              "type": "string",
              "literal": "\"eager blur\"",
              "formatted": "\"eager blur\""
            },
            {
              "text": "\"eager input\"",
              "type": "string",
              "literal": "\"eager input\"",
              "formatted": "\"eager input\""
            },
            {
              "text": "\"eager submit\"",
              "type": "string",
              "literal": "\"eager submit\"",
              "formatted": "\"eager submit\""
            },
            {
              "text": "\"eager invalid-input\"",
              "type": "string",
              "literal": "\"eager invalid-input\"",
              "formatted": "\"eager invalid-input\""
            }
          ],
          "formatted": "\"eager\" | \"lazy\" | \"blur\" | \"input\" | \"submit\" | \"invalid-input\" | \"blur lazy\" | \"input lazy\" | \"submit lazy\" | \"invalid-input lazy\" | \"blur eager\" | \"input eager\" | \"submit eager\" | \"invalid-input eager\" | \"lazy blur\" | \"lazy input\" | \"lazy submit\" | \"lazy invalid-input\" | \"eager blur\" | \"eager input\" | \"eager submit\" | \"eager invalid-input\""
        }
      ],
      "formatted": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
      "optional": false,
      "description": {
        "en": "Change what type of event triggers validation to run."
      },
      "descriptionSource": {
        "en": "validation"
      }
    },
    "validationValue": {
      "text": "any",
      "source": "validation",
      "type": "any",
      "formatted": "any\n",
      "optional": false,
      "description": {
        "en": "The value used when applying validation rules."
      },
      "descriptionSource": {
        "en": "validation"
      }
    },
    "focused": {
      "text": "boolean | undefined",
      "source": "focus",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Forces a focused state styling on the component."
      },
      "descriptionSource": {
        "en": "focus"
      }
    },
    "hideDetails": {
      "text": "boolean | \"auto\" | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        },
        {
          "text": "\"auto\"",
          "type": "string",
          "literal": "\"auto\"",
          "formatted": "\"auto\""
        }
      ],
      "formatted": "boolean | 'auto'\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    }
  },
  "events": {
    "update:modelValue": {
      "text": "[value: unknown]",
      "type": "array",
      "items": [
        {
          "text": "unknown",
          "type": "unknown",
          "formatted": "unknown"
        }
      ],
      "length": 1,
      "formatted": "[unknown]\n",
      "optional": false,
      "description": {
        "en": "Event that is emitted when the component's model changes."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "update:indeterminate": {
      "text": "[value: boolean]",
      "type": "array",
      "items": [
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "length": 1,
      "formatted": "[boolean]\n",
      "optional": false,
      "description": {
        "en": "Event that is emitted when the component's indeterminate state changes."
      },
      "descriptionSource": {
        "en": "VSwitch"
      }
    },
    "click:prepend": {
      "text": "[MouseEvent]",
      "type": "array",
      "items": [
        {
          "text": "MouseEvent",
          "source": "typescript/lib/lib.dom.d.ts#L9825-L9876",
          "type": "ref",
          "ref": "MouseEvent",
          "formatted": "MouseEvent"
        }
      ],
      "length": 1,
      "formatted": "[MouseEvent]\n",
      "optional": false,
      "description": {
        "en": "Emitted when prepended icon is clicked."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "click:append": {
      "text": "[MouseEvent]",
      "type": "array",
      "items": [
        {
          "text": "MouseEvent",
          "source": "typescript/lib/lib.dom.d.ts#L9825-L9876",
          "type": "ref",
          "ref": "MouseEvent",
          "formatted": "MouseEvent"
        }
      ],
      "length": 1,
      "formatted": "[MouseEvent]\n",
      "optional": false,
      "description": {
        "en": "Emitted when appended icon is clicked."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "update:focused": {
      "text": "[focused: boolean]",
      "type": "array",
      "items": [
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "length": 1,
      "formatted": "[boolean]\n",
      "optional": false,
      "description": {
        "en": "Event that is emitted when the component's focus state changes."
      },
      "descriptionSource": {
        "en": "generic"
      }
    }
  },
  "slots": {
    "default": {
      "text": "VInputSlot & { backgroundColorClasses: Ref<string[], string[]>; backgroundColorStyles: Ref<CSSProperties, CSSProperties>; }",
      "type": "allOf",
      "items": [
        {
          "text": "VInputSlot",
          "source": "vuetify/src/components/VInput/VInput.tsx#L26-L38",
          "type": "object",
          "properties": {
            "id": {
              "text": "ComputedRef<string>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<string>",
              "optional": false
            },
            "messagesId": {
              "text": "ComputedRef<string>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<string>",
              "optional": false
            },
            "isDirty": {
              "text": "ComputedRef<boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<boolean>",
              "optional": false
            },
            "isDisabled": {
              "text": "ComputedRef<boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<boolean>",
              "optional": false
            },
            "isReadonly": {
              "text": "ComputedRef<boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<boolean>",
              "optional": false
            },
            "isPristine": {
              "text": "Ref<boolean, boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<boolean, boolean>",
              "optional": false
            },
            "isValid": {
              "text": "ComputedRef<boolean | null>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<boolean | null>",
              "optional": false
            },
            "isValidating": {
              "text": "Ref<boolean, boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<boolean, boolean>",
              "optional": false
            },
            "reset": {
              "text": "() => void",
              "source": "vuetify/src/components/VInput/VInput.tsx#L35-L35",
              "type": "function",
              "parameters": [],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "() => void",
              "optional": false
            },
            "resetValidation": {
              "text": "() => void",
              "source": "vuetify/src/components/VInput/VInput.tsx#L36-L36",
              "type": "function",
              "parameters": [],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "() => void",
              "optional": false
            },
            "validate": {
              "text": "() => void",
              "source": "vuetify/src/components/VInput/VInput.tsx#L37-L37",
              "type": "function",
              "parameters": [],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "() => void",
              "optional": false
            }
          },
          "formatted": "{ id: ComputedRef<string>; messagesId: ComputedRef<string>; isDirty: ComputedRef<boolean>; isDisabled: ComputedRef<boolean>; isReadonly: ComputedRef<boolean>; isPristine: Ref<boolean, boolean>; isValid: ComputedRef<boolean | null>; isValidating: Ref<boolean, boolean>; reset: () => void; resetValidation: () => void; validate: () => void }"
        },
        {
          "text": "{ backgroundColorClasses: Ref<string[], string[]>; backgroundColorStyles: Ref<CSSProperties, CSSProperties>; }",
          "source": "vuetify/src/components/VSelectionControl/VSelectionControl.tsx#L50-L53",
          "type": "object",
          "properties": {
            "backgroundColorClasses": {
              "text": "Ref<string[], string[]>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<string[], string[]>",
              "optional": false
            },
            "backgroundColorStyles": {
              "text": "Ref<CSSProperties, CSSProperties>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<CSSProperties, CSSProperties>",
              "optional": false
            }
          },
          "formatted": "{ backgroundColorClasses: Ref<string[], string[]>; backgroundColorStyles: Ref<CSSProperties, CSSProperties> }"
        }
      ],
      "formatted": "{\n  id: ComputedRef<string>\n  messagesId: ComputedRef<string>\n  isDirty: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean, boolean>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean, boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n} & {\n  backgroundColorClasses: Ref<string[], string[]>\n  backgroundColorStyles: Ref<CSSProperties, CSSProperties>\n}\n",
      "optional": false,
      "description": {
        "en": "The default Vue slot."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "prepend": {
      "text": "VInputSlot",
      "source": "vuetify/src/components/VInput/VInput.tsx#L26-L38",
      "type": "object",
      "properties": {
        "id": {
          "text": "ComputedRef<string>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<string>",
          "optional": false
        },
        "messagesId": {
          "text": "ComputedRef<string>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<string>",
          "optional": false
        },
        "isDirty": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isDisabled": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isReadonly": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isPristine": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "isValid": {
          "text": "ComputedRef<boolean | null>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean | null>",
          "optional": false
        },
        "isValidating": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "reset": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L35-L35",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "resetValidation": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L36-L36",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "validate": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L37-L37",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        }
      },
      "formatted": "{\n  id: ComputedRef<string>\n  messagesId: ComputedRef<string>\n  isDirty: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean, boolean>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean, boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n}\n",
      "optional": false,
      "description": {
        "en": "Adds an item outside the input and before input content."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "append": {
      "text": "VInputSlot",
      "source": "vuetify/src/components/VInput/VInput.tsx#L26-L38",
      "type": "object",
      "properties": {
        "id": {
          "text": "ComputedRef<string>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<string>",
          "optional": false
        },
        "messagesId": {
          "text": "ComputedRef<string>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<string>",
          "optional": false
        },
        "isDirty": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isDisabled": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isReadonly": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isPristine": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "isValid": {
          "text": "ComputedRef<boolean | null>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean | null>",
          "optional": false
        },
        "isValidating": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "reset": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L35-L35",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "resetValidation": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L36-L36",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "validate": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L37-L37",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        }
      },
      "formatted": "{\n  id: ComputedRef<string>\n  messagesId: ComputedRef<string>\n  isDirty: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean, boolean>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean, boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n}\n",
      "optional": false,
      "description": {
        "en": "Adds an item inside the input and after input content."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "details": {
      "text": "VInputSlot",
      "source": "vuetify/src/components/VInput/VInput.tsx#L26-L38",
      "type": "object",
      "properties": {
        "id": {
          "text": "ComputedRef<string>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<string>",
          "optional": false
        },
        "messagesId": {
          "text": "ComputedRef<string>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<string>",
          "optional": false
        },
        "isDirty": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isDisabled": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isReadonly": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isPristine": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "isValid": {
          "text": "ComputedRef<boolean | null>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean | null>",
          "optional": false
        },
        "isValidating": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "reset": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L35-L35",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "resetValidation": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L36-L36",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "validate": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L37-L37",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        }
      },
      "formatted": "{\n  id: ComputedRef<string>\n  messagesId: ComputedRef<string>\n  isDirty: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean, boolean>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean, boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n}\n",
      "optional": false,
      "description": {
        "en": "Slot for custom input details to modifying the display of [messages](#props-messages)."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "message": {
      "text": "VMessageSlot",
      "source": "vuetify/src/components/VMessages/VMessages.tsx#L19-L21",
      "type": "object",
      "properties": {
        "message": {
          "text": "string",
          "type": "string",
          "formatted": "string",
          "optional": false
        }
      },
      "formatted": "{ message: string }\n",
      "optional": false,
      "description": {
        "en": "Slot used to customize the message content."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "label": {
      "text": "{ label: string | undefined; props: Record<string, unknown>; }",
      "source": "vuetify/src/components/VSelectionControl/VSelectionControl.tsx#L54-L54",
      "type": "object",
      "properties": {
        "label": {
          "text": "string | undefined",
          "type": "anyOf",
          "items": [
            {
              "text": "undefined",
              "type": "UNSUPPORTED",
              "formatted": "undefined"
            },
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            }
          ],
          "formatted": "string",
          "optional": false
        },
        "props": {
          "text": "Record<string, unknown>",
          "source": "typescript/lib/lib.es5.d.ts#L6-L6",
          "type": "record",
          "key": {
            "text": "string",
            "type": "string",
            "formatted": "string"
          },
          "value": {
            "text": "unknown",
            "type": "unknown",
            "formatted": "unknown"
          },
          "formatted": "Record<string, unknown>",
          "optional": false
        }
      },
      "formatted": "{ label: string; props: Record<string, unknown> }\n",
      "optional": false,
      "description": {
        "en": "The default slot of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "input": {
      "text": "SelectionControlSlot",
      "source": "vuetify/src/components/VSelectionControl/VSelectionControl.tsx#L34-L47",
      "type": "object",
      "properties": {
        "model": {
          "text": "WritableComputedRef<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L358-L360",
          "type": "ref",
          "ref": "WritableComputedRef",
          "formatted": "WritableComputedRef<boolean, boolean>",
          "optional": false
        },
        "textColorClasses": {
          "text": "Ref<string[], string[]>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<string[], string[]>",
          "optional": false
        },
        "textColorStyles": {
          "text": "Ref<CSSProperties, CSSProperties>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<CSSProperties, CSSProperties>",
          "optional": false
        },
        "backgroundColorClasses": {
          "text": "Ref<string[], string[]>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<string[], string[]>",
          "optional": false
        },
        "backgroundColorStyles": {
          "text": "Ref<CSSProperties, CSSProperties>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<CSSProperties, CSSProperties>",
          "optional": false
        },
        "inputNode": {
          "text": "VNode<RendererNode, RendererElement, { [key: string]: any; }>",
          "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1204-L1229",
          "type": "ref",
          "ref": "VNode",
          "formatted": "VNode<RendererNode, RendererElement, { [key: string]: any; }>",
          "optional": false
        },
        "icon": {
          "text": "IconValue | undefined",
          "type": "anyOf",
          "items": [
            {
              "text": "undefined",
              "type": "UNSUPPORTED",
              "formatted": "undefined"
            },
            {
              "text": "IconValue",
              "source": "vuetify/src/composables/icons.tsx#L12-L15",
              "type": "anyOf",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "(string | [path: string, opacity: number])[]",
                  "source": "typescript/lib/lib.es5.d.ts#L4-L4",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "[path: string, opacity: number]",
                      "type": "array",
                      "items": [
                        {
                          "text": "string",
                          "type": "string",
                          "formatted": "string"
                        },
                        {
                          "text": "number",
                          "type": "number",
                          "formatted": "number"
                        }
                      ],
                      "length": 2,
                      "formatted": "[string, number]"
                    }
                  ],
                  "formatted": "(string | [string, number])[]"
                },
                {
                  "text": "JSXComponent",
                  "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
                  "type": "anyOf",
                  "items": [
                    {
                      "text": "new () => any",
                      "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                      "type": "constructor",
                      "formatted": "new () => any"
                    },
                    {
                      "text": "FunctionalComponent<any, {}, any, {}>",
                      "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                      "type": "ref",
                      "ref": "FunctionalComponent",
                      "formatted": "FunctionalComponent"
                    }
                  ],
                  "formatted": "(new () => any) | FunctionalComponent"
                }
              ],
              "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent",
          "optional": false
        },
        "props": {
          "text": "{ onBlur: (e: Event) => void; onFocus: (e: FocusEvent) => void; id: string; }",
          "source": "vuetify/src/components/VSelectionControl/VSelectionControl.tsx#L42-L46",
          "type": "object",
          "properties": {
            "onBlur": {
              "text": "(e: Event) => void",
              "source": "vuetify/src/components/VSelectionControl/VSelectionControl.tsx#L43-L43",
              "type": "function",
              "parameters": [
                {
                  "name": "e",
                  "optional": false,
                  "text": "Event",
                  "source": "typescript/lib/lib.dom.d.ts#L2163-L2276",
                  "type": "ref",
                  "ref": "Event",
                  "formatted": "Event"
                }
              ],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "(e: Event) => void",
              "optional": false
            },
            "onFocus": {
              "text": "(e: FocusEvent) => void",
              "source": "vuetify/src/components/VSelectionControl/VSelectionControl.tsx#L44-L44",
              "type": "function",
              "parameters": [
                {
                  "name": "e",
                  "optional": false,
                  "text": "FocusEvent",
                  "source": "typescript/lib/lib.dom.d.ts#L2674-L2677",
                  "type": "ref",
                  "ref": "FocusEvent",
                  "formatted": "FocusEvent"
                }
              ],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "(e: FocusEvent) => void",
              "optional": false
            },
            "id": {
              "text": "string",
              "type": "string",
              "formatted": "string",
              "optional": false
            }
          },
          "formatted": "{ onBlur: (e: Event) => void; onFocus: (e: FocusEvent) => void; id: string }",
          "optional": false
        }
      },
      "formatted": "{\n  model: WritableComputedRef<boolean, boolean>\n  textColorClasses: Ref<string[], string[]>\n  textColorStyles: Ref<CSSProperties, CSSProperties>\n  backgroundColorClasses: Ref<string[], string[]>\n  backgroundColorStyles: Ref<CSSProperties, CSSProperties>\n  inputNode: VNode<RendererNode, RendererElement, { [key: string]: any }>\n  icon:\n    | string\n    | (string | [string, number])[]\n    | (new () => any)\n    | FunctionalComponent\n  props: {\n    onBlur: (e: Event) => void\n    onFocus: (e: FocusEvent) => void\n    id: string\n  }\n}\n",
      "optional": false,
      "description": {
        "en": "The slot used for the default input element."
      },
      "descriptionSource": {
        "en": "VSelectionControl"
      }
    },
    "loader": {
      "text": "LoaderSlotProps",
      "source": "vuetify/src/composables/loader.tsx#L12-L15",
      "type": "object",
      "properties": {
        "color": {
          "text": "string | undefined",
          "type": "anyOf",
          "items": [
            {
              "text": "undefined",
              "type": "UNSUPPORTED",
              "formatted": "undefined"
            },
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            }
          ],
          "formatted": "string",
          "optional": false
        },
        "isActive": {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean",
          "optional": false
        }
      },
      "formatted": "{ color: string; isActive: boolean }\n",
      "optional": false,
      "description": {
        "en": "Slot for custom loader (displayed when [loading](#props-loading) prop is equal to true)."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "thumb": {
      "text": "{ icon: IconValue | undefined; } & VSwitchSlot",
      "type": "allOf",
      "items": [
        {
          "text": "{ icon: IconValue | undefined; }",
          "source": "vuetify/src/components/VSwitch/VSwitch.tsx#L39-L39",
          "type": "object",
          "properties": {
            "icon": {
              "text": "IconValue | undefined",
              "type": "anyOf",
              "items": [
                {
                  "text": "undefined",
                  "type": "UNSUPPORTED",
                  "formatted": "undefined"
                },
                {
                  "text": "IconValue",
                  "source": "vuetify/src/composables/icons.tsx#L12-L15",
                  "type": "anyOf",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "(string | [path: string, opacity: number])[]",
                      "source": "typescript/lib/lib.es5.d.ts#L4-L4",
                      "type": "array",
                      "items": [
                        {
                          "text": "string",
                          "type": "string",
                          "formatted": "string"
                        },
                        {
                          "text": "[path: string, opacity: number]",
                          "type": "array",
                          "items": [
                            {
                              "text": "string",
                              "type": "string",
                              "formatted": "string"
                            },
                            {
                              "text": "number",
                              "type": "number",
                              "formatted": "number"
                            }
                          ],
                          "length": 2,
                          "formatted": "[string, number]"
                        }
                      ],
                      "formatted": "(string | [string, number])[]"
                    },
                    {
                      "text": "JSXComponent",
                      "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
                      "type": "anyOf",
                      "items": [
                        {
                          "text": "new () => any",
                          "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                          "type": "constructor",
                          "formatted": "new () => any"
                        },
                        {
                          "text": "FunctionalComponent<any, {}, any, {}>",
                          "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                          "type": "ref",
                          "ref": "FunctionalComponent",
                          "formatted": "FunctionalComponent"
                        }
                      ],
                      "formatted": "(new () => any) | FunctionalComponent"
                    }
                  ],
                  "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
                }
              ],
              "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent",
              "optional": false
            }
          },
          "formatted": "{ icon: string | (string | [string, number])[] | (new () => any) | FunctionalComponent }"
        },
        {
          "text": "VSwitchSlot",
          "source": "vuetify/src/components/VSwitch/VSwitch.tsx#L29-L32",
          "type": "object",
          "properties": {
            "model": {
              "text": "Ref<boolean, boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<boolean, boolean>",
              "optional": false
            },
            "isValid": {
              "text": "ComputedRef<boolean | null>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<boolean | null>",
              "optional": false
            }
          },
          "formatted": "{ model: Ref<boolean, boolean>; isValid: ComputedRef<boolean | null> }"
        }
      ],
      "formatted": "{\n  icon:\n    | string\n    | (string | [string, number])[]\n    | (new () => any)\n    | FunctionalComponent\n} & { model: Ref<boolean, boolean>; isValid: ComputedRef<boolean | null> }\n",
      "optional": false,
      "description": {
        "en": "Slot for custom thumb content."
      },
      "descriptionSource": {
        "en": "VSwitch"
      }
    },
    "track-false": {
      "text": "VSwitchSlot",
      "source": "vuetify/src/components/VSwitch/VSwitch.tsx#L29-L32",
      "type": "object",
      "properties": {
        "model": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "isValid": {
          "text": "ComputedRef<boolean | null>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean | null>",
          "optional": false
        }
      },
      "formatted": "{\n  model: Ref<boolean, boolean>\n  isValid: ComputedRef<boolean | null>\n}\n",
      "optional": false,
      "description": {
        "en": "Slot for custom track content when value is false."
      },
      "descriptionSource": {
        "en": "VSwitch"
      }
    },
    "track-true": {
      "text": "VSwitchSlot",
      "source": "vuetify/src/components/VSwitch/VSwitch.tsx#L29-L32",
      "type": "object",
      "properties": {
        "model": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "isValid": {
          "text": "ComputedRef<boolean | null>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean | null>",
          "optional": false
        }
      },
      "formatted": "{\n  model: Ref<boolean, boolean>\n  isValid: ComputedRef<boolean | null>\n}\n",
      "optional": false,
      "description": {
        "en": "Slot for custom track content when value is true."
      },
      "descriptionSource": {
        "en": "VSwitch"
      }
    }
  },
  "exposed": {},
  "sass": {
    "$switch-flex": {
      "default": "0 1 auto"
    },
    "$switch-control-input-transition": {
      "default": ".2s transform settings.$standard-easing"
    },
    "$switch-error-background-color": {
      "default": "rgb(var(--v-theme-error))"
    },
    "$switch-error-color": {
      "default": "rgb(var(--v-theme-on-error))"
    },
    "$switch-inset-thumb-height": {
      "default": "24px"
    },
    "$switch-inset-thumb-width": {
      "default": "24px"
    },
    "$switch-inset-thumb-off-height": {
      "default": "16px"
    },
    "$switch-inset-thumb-off-width": {
      "default": "16px"
    },
    "$switch-inset-track-border-radius": {
      "default": "9999px"
    },
    "$switch-inset-track-height": {
      "default": "32px"
    },
    "$switch-inset-track-width": {
      "default": "52px"
    },
    "$switch-label-margin-inline-start": {
      "default": "10px"
    },
    "$switch-loader-color": {
      "default": "rgb(var(--v-theme-surface))"
    },
    "$switch-thumb-background": {
      "default": "rgb(var(--v-theme-surface-bright))"
    },
    "$switch-thumb-color": {
      "default": "rgb(var(--v-theme-on-surface-bright))"
    },
    "$switch-thumb-flat-background": {
      "default": "rgb(var(--v-theme-surface-variant))"
    },
    "$switch-thumb-flat-color": {
      "default": "rgb(var(--v-theme-on-surface-variant))"
    },
    "$switch-thumb-elevation": {
      "default": "4"
    },
    "$switch-thumb-height": {
      "default": "20px"
    },
    "$switch-thumb-width": {
      "default": "20px"
    },
    "$switch-thumb-offset": {
      "default": "2px"
    },
    "$switch-thumb-radius": {
      "default": "50%"
    },
    "$switch-thumb-transition": {
      "default": ".15s .05s transform settings.$decelerated-easing, .2s color settings.$standard-easing, .2s background-color settings.$standard-easing"
    },
    "$switch-thumb-vertical-transform": {
      "default": "rotate(-90deg)"
    },
    "$switch-track-background": {
      "default": "rgb(var(--v-theme-surface-variant))"
    },
    "$switch-track-radius": {
      "default": "9999px"
    },
    "$switch-track-width": {
      "default": "36px"
    },
    "$switch-track-height": {
      "default": "14px"
    },
    "$switch-track-opacity": {
      "default": ".6"
    },
    "$switch-track-transition": {
      "default": ".2s background-color settings.$standard-easing"
    }
  }
}