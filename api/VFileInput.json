{
  "displayName": "VFileInput",
  "fileName": "VFileInput",
  "pathName": "v-file-input",
  "props": {
    "flat": {
      "text": "boolean | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Removes box shadow when using a variant with elevation."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "active": {
      "text": "boolean | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Controls the **active** state of the item. This is typically used to highlight the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "baseColor": {
      "text": "string | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Sets the color of the input when it is not focused."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "prependIcon": {
      "text": "IconValue | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "IconValue",
          "source": "vuetify/src/composables/icons.tsx#L12-L15",
          "type": "anyOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "(string | [path: string, opacity: number])[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "[path: string, opacity: number]",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "number",
                      "type": "number",
                      "formatted": "number"
                    }
                  ],
                  "length": 2,
                  "formatted": "[string, number]"
                }
              ],
              "formatted": "(string | [string, number])[]"
            },
            {
              "text": "JSXComponent",
              "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
              "type": "anyOf",
              "items": [
                {
                  "text": "new () => any",
                  "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                  "type": "constructor",
                  "formatted": "new () => any"
                },
                {
                  "text": "FunctionalComponent<any, {}, any, {}>",
                  "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                  "type": "ref",
                  "ref": "FunctionalComponent",
                  "formatted": "FunctionalComponent"
                }
              ],
              "formatted": "(new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
      "optional": false,
      "default": "'$file'",
      "description": {
        "en": "Prepends an icon to the component, uses the same syntax as `v-icon`."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "appendIcon": {
      "text": "IconValue | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "IconValue",
          "source": "vuetify/src/composables/icons.tsx#L12-L15",
          "type": "anyOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "(string | [path: string, opacity: number])[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "[path: string, opacity: number]",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "number",
                      "type": "number",
                      "formatted": "number"
                    }
                  ],
                  "length": 2,
                  "formatted": "[string, number]"
                }
              ],
              "formatted": "(string | [string, number])[]"
            },
            {
              "text": "JSXComponent",
              "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
              "type": "anyOf",
              "items": [
                {
                  "text": "new () => any",
                  "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                  "type": "constructor",
                  "formatted": "new () => any"
                },
                {
                  "text": "FunctionalComponent<any, {}, any, {}>",
                  "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                  "type": "ref",
                  "ref": "FunctionalComponent",
                  "formatted": "FunctionalComponent"
                }
              ],
              "formatted": "(new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
      "optional": false,
      "description": {
        "en": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "readonly": {
      "text": "boolean | null | undefined",
      "source": "validation",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "null",
          "type": "UNSUPPORTED",
          "formatted": "null"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": "null",
      "description": {
        "en": "Puts input in readonly state."
      },
      "descriptionSource": {
        "en": "validation"
      }
    },
    "reverse": {
      "text": "boolean | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Reverses the orientation."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "density": {
      "text": "Density | undefined",
      "source": "density",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "Density",
          "source": "vuetify/src/composables/density.ts#L12-L12",
          "type": "anyOf",
          "items": [
            {
              "text": "null",
              "type": "UNSUPPORTED",
              "formatted": "null"
            },
            {
              "text": "\"default\"",
              "type": "string",
              "literal": "\"default\"",
              "formatted": "\"default\""
            },
            {
              "text": "\"comfortable\"",
              "type": "string",
              "literal": "\"comfortable\"",
              "formatted": "\"comfortable\""
            },
            {
              "text": "\"compact\"",
              "type": "string",
              "literal": "\"compact\"",
              "formatted": "\"compact\""
            }
          ],
          "formatted": "\"default\" | \"comfortable\" | \"compact\""
        }
      ],
      "formatted": "'default' | 'comfortable' | 'compact'\n",
      "optional": false,
      "default": "'default'",
      "description": {
        "en": "Adjusts the vertical height used by the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "maxWidth": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the maximum width for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "minWidth": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the minimum width for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "width": {
      "text": "string | number | undefined",
      "source": "dimension",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "description": {
        "en": "Sets the width for the component."
      },
      "descriptionSource": {
        "en": "dimension"
      }
    },
    "disabled": {
      "text": "boolean | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": "null",
      "description": {
        "en": "Removes the ability to click or target the input."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "loading": {
      "text": "string | boolean | undefined",
      "source": "loader",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "string | boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "rounded": {
      "text": "string | number | boolean | undefined",
      "source": "rounded",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "string | number | boolean\n",
      "optional": false,
      "description": {
        "en": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
      },
      "descriptionSource": {
        "en": "rounded"
      }
    },
    "tile": {
      "text": "boolean | undefined",
      "source": "rounded",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Removes any applied **border-radius** from the component."
      },
      "descriptionSource": {
        "en": "rounded"
      }
    },
    "theme": {
      "text": "string | undefined",
      "source": "theme",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Specify a theme for this component and all of its children."
      },
      "descriptionSource": {
        "en": "theme"
      }
    },
    "color": {
      "text": "string | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "variant": {
      "text": "\"outlined\" | \"plain\" | \"underlined\" | \"filled\" | \"solo\" | \"solo-inverted\" | \"solo-filled\" | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "\"outlined\"",
          "type": "string",
          "literal": "\"outlined\"",
          "formatted": "\"outlined\""
        },
        {
          "text": "\"plain\"",
          "type": "string",
          "literal": "\"plain\"",
          "formatted": "\"plain\""
        },
        {
          "text": "\"underlined\"",
          "type": "string",
          "literal": "\"underlined\"",
          "formatted": "\"underlined\""
        },
        {
          "text": "\"filled\"",
          "type": "string",
          "literal": "\"filled\"",
          "formatted": "\"filled\""
        },
        {
          "text": "\"solo\"",
          "type": "string",
          "literal": "\"solo\"",
          "formatted": "\"solo\""
        },
        {
          "text": "\"solo-inverted\"",
          "type": "string",
          "literal": "\"solo-inverted\"",
          "formatted": "\"solo-inverted\""
        },
        {
          "text": "\"solo-filled\"",
          "type": "string",
          "literal": "\"solo-filled\"",
          "formatted": "\"solo-filled\""
        }
      ],
      "formatted": "  | 'outlined'\n  | 'plain'\n  | 'underlined'\n  | 'filled'\n  | 'solo'\n  | 'solo-inverted'\n  | 'solo-filled'\n",
      "optional": false,
      "default": "'filled'",
      "description": {
        "en": "Applies a distinct style to the component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "name": {
      "text": "string | undefined",
      "source": "validation",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Sets the component's name attribute."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "multiple": {
      "text": "boolean | undefined",
      "source": "VFileInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Adds the **multiple** attribute to the input, allowing multiple file selections."
      },
      "descriptionSource": {
        "en": "VFileInput"
      }
    },
    "id": {
      "text": "string | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Sets the DOM id on the component."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "bgColor": {
      "text": "string | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "modelValue": {
      "text": "File | File[] | null | undefined",
      "source": "VFileInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "null",
          "type": "UNSUPPORTED",
          "formatted": "null"
        },
        {
          "text": "File",
          "source": "typescript/lib/lib.dom.d.ts#L2424-L2431",
          "type": "ref",
          "ref": "File",
          "formatted": "File"
        },
        {
          "text": "File[]",
          "source": "typescript/lib/lib.es5.d.ts#L4-L4",
          "type": "array",
          "items": [
            {
              "text": "File",
              "source": "typescript/lib/lib.dom.d.ts#L2424-L2431",
              "type": "ref",
              "ref": "File",
              "formatted": "File"
            }
          ],
          "formatted": "File[]"
        }
      ],
      "formatted": "File | File[]\n",
      "optional": false,
      "default": "null",
      "description": {
        "en": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "error": {
      "text": "boolean | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Puts the input in a manual error state."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "label": {
      "text": "string | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "counter": {
      "text": "boolean | undefined",
      "source": "VFileInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Displays the number of selected files."
      },
      "descriptionSource": {
        "en": "VFileInput"
      }
    },
    "chips": {
      "text": "boolean | undefined",
      "source": "VFileInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Changes display of selections to chips."
      },
      "descriptionSource": {
        "en": "VFileInput"
      }
    },
    "counterSizeString": {
      "text": "string | undefined",
      "source": "VFileInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "default": "'$vuetify.fileInput.counterSize'",
      "description": {
        "en": "The text displayed when using the **counter** and **show-size** props. Can also be customized globally on the [internationalization page](/customization/internationalization)."
      },
      "descriptionSource": {
        "en": "VFileInput"
      }
    },
    "counterString": {
      "text": "string | undefined",
      "source": "VFileInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "default": "'$vuetify.fileInput.counter'",
      "description": {
        "en": "The text displayed when using the **counter** prop. Can also be customized globally on the [internationalization page](/customization/internationalization)."
      },
      "descriptionSource": {
        "en": "VFileInput"
      }
    },
    "hideInput": {
      "text": "boolean | undefined",
      "source": "VFileInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Display the icon only without the input (file names)."
      },
      "descriptionSource": {
        "en": "VFileInput"
      }
    },
    "showSize": {
      "text": "boolean | 1000 | 1024 | undefined",
      "source": "VFileInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        },
        {
          "text": "1000",
          "type": "number",
          "literal": "1000",
          "formatted": "1000"
        },
        {
          "text": "1024",
          "type": "number",
          "literal": "1024",
          "formatted": "1024"
        }
      ],
      "formatted": "boolean | 1000 | 1024\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Sets the displayed size of selected file(s). When using **true** will default to _1000_ displaying (**kB, MB, GB**) while _1024_ will display (**KiB, MiB, GiB**)."
      },
      "descriptionSource": {
        "en": "VFileInput"
      }
    },
    "centerAffix": {
      "text": "boolean | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "description": {
        "en": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "glow": {
      "text": "boolean | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Makes prepend/append icons full opacity when the field is focused and apply color."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "iconColor": {
      "text": "string | boolean | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "string | boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Sets the color of the prepend/append icons."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "hideSpinButtons": {
      "text": "boolean | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Hides spin buttons on the input when type is set to `number`."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "hint": {
      "text": "string | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string\n",
      "optional": false,
      "description": {
        "en": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "persistentHint": {
      "text": "boolean | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Forces [hint](#props-hint) to always be visible."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "messages": {
      "text": "string | readonly string[] | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "readonly string[]",
          "source": "typescript/lib/lib.es5.d.ts#L4-L4",
          "type": "array",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            }
          ],
          "formatted": "string[]"
        }
      ],
      "formatted": "string | string[]\n",
      "optional": false,
      "default": "[]",
      "description": {
        "en": "Displays a list of messages or a single message if using a string."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "direction": {
      "text": "\"vertical\" | \"horizontal\" | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "\"vertical\"",
          "type": "string",
          "literal": "\"vertical\"",
          "formatted": "\"vertical\""
        },
        {
          "text": "\"horizontal\"",
          "type": "string",
          "literal": "\"horizontal\"",
          "formatted": "\"horizontal\""
        }
      ],
      "formatted": "'vertical' | 'horizontal'\n",
      "optional": false,
      "default": "'horizontal'",
      "description": {
        "en": "Changes the direction of the input."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "errorMessages": {
      "text": "string | readonly string[] | null | undefined",
      "source": "validation",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "null",
          "type": "UNSUPPORTED",
          "formatted": "null"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "readonly string[]",
          "source": "typescript/lib/lib.es5.d.ts#L4-L4",
          "type": "array",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            }
          ],
          "formatted": "string[]"
        }
      ],
      "formatted": "string | string[]\n",
      "optional": false,
      "default": "[]",
      "description": {
        "en": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
      },
      "descriptionSource": {
        "en": "validation"
      }
    },
    "maxErrors": {
      "text": "string | number | undefined",
      "source": "validation",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        },
        {
          "text": "number",
          "type": "number",
          "formatted": "number"
        }
      ],
      "formatted": "string | number\n",
      "optional": false,
      "default": 1,
      "description": {
        "en": "Control the maximum number of shown errors from validation."
      },
      "descriptionSource": {
        "en": "validation"
      }
    },
    "rules": {
      "text": "readonly (string | boolean | PromiseLike<ValidationResult> | ((value: any) => ValidationResult) | ((value: any) => PromiseLike<ValidationResult>) | [string, any, (string | undefined)?])[] | undefined",
      "source": "validation",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "readonly (string | boolean | PromiseLike<ValidationResult> | ((value: any) => ValidationResult) | ((value: any) => PromiseLike<ValidationResult>) | [string, any, (string | undefined)?])[]",
          "source": "typescript/lib/lib.es5.d.ts#L4-L4",
          "type": "array",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "boolean",
              "type": "boolean",
              "formatted": "boolean"
            },
            {
              "text": "PromiseLike<ValidationResult>",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "ref",
              "ref": "PromiseLike",
              "formatted": "PromiseLike<ValidationResult>"
            },
            {
              "text": "(value: any) => ValidationResult",
              "source": "vuetify/src/composables/validation.ts#L21-L21",
              "type": "function",
              "parameters": [
                {
                  "name": "value",
                  "optional": false,
                  "text": "any",
                  "type": "any",
                  "formatted": "any"
                }
              ],
              "returnType": {
                "text": "ValidationResult",
                "source": "vuetify/src/composables/validation.ts#L17-L17",
                "type": "anyOf",
                "items": [
                  {
                    "text": "string",
                    "type": "ref",
                    "ref": "",
                    "formatted": "string"
                  },
                  {
                    "text": "false",
                    "type": "ref",
                    "ref": "",
                    "formatted": "false"
                  },
                  {
                    "text": "true",
                    "type": "ref",
                    "ref": "",
                    "formatted": "true"
                  }
                ],
                "formatted": "string | false | true"
              },
              "formatted": "(value: any) => string | false | true"
            },
            {
              "text": "(value: any) => PromiseLike<ValidationResult>",
              "source": "vuetify/src/composables/validation.ts#L22-L22",
              "type": "function",
              "parameters": [
                {
                  "name": "value",
                  "optional": false,
                  "text": "any",
                  "type": "any",
                  "formatted": "any"
                }
              ],
              "returnType": {
                "text": "PromiseLike<ValidationResult>",
                "source": "typescript/lib/lib.es5.d.ts#L4-L4",
                "type": "ref",
                "ref": "PromiseLike",
                "formatted": "PromiseLike<ValidationResult>"
              },
              "formatted": "(value: any) => PromiseLike<ValidationResult>"
            },
            {
              "text": "[string, any, (string | undefined)?]",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "any",
                  "type": "any",
                  "formatted": "any"
                },
                {
                  "text": "string | undefined",
                  "type": "anyOf",
                  "items": [
                    {
                      "text": "undefined",
                      "type": "UNSUPPORTED",
                      "formatted": "undefined"
                    },
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    }
                  ],
                  "formatted": "string"
                }
              ],
              "length": 3,
              "formatted": "[string, any, (string)]"
            }
          ],
          "formatted": "(string | boolean | PromiseLike<ValidationResult> | ((value: any) => string | false | true) | ((value: any) => PromiseLike<ValidationResult>) | [string, any, (string)])[]"
        }
      ],
      "formatted": "(\n  | string\n  | boolean\n  | PromiseLike<ValidationResult>\n  | ((value: any) => string | false | true)\n  | ((value: any) => PromiseLike<ValidationResult>)\n  | [string, any, string]\n)[]\n",
      "optional": false,
      "default": "[]",
      "description": {
        "en": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
      },
      "descriptionSource": {
        "en": "validation"
      }
    },
    "validateOn": {
      "text": "ValidateOn | undefined",
      "source": "validation",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "ValidateOn",
          "source": "vuetify/src/composables/validation.ts#L25-L32",
          "type": "anyOf",
          "items": [
            {
              "text": "\"eager\"",
              "type": "string",
              "literal": "\"eager\"",
              "formatted": "\"eager\""
            },
            {
              "text": "\"lazy\"",
              "type": "string",
              "literal": "\"lazy\"",
              "formatted": "\"lazy\""
            },
            {
              "text": "ValidateOnValue",
              "source": "vuetify/src/composables/validation.ts#L24-L24",
              "type": "anyOf",
              "items": [
                {
                  "text": "\"blur\"",
                  "type": "string",
                  "literal": "\"blur\"",
                  "formatted": "\"blur\""
                },
                {
                  "text": "\"input\"",
                  "type": "string",
                  "literal": "\"input\"",
                  "formatted": "\"input\""
                },
                {
                  "text": "\"submit\"",
                  "type": "string",
                  "literal": "\"submit\"",
                  "formatted": "\"submit\""
                },
                {
                  "text": "\"invalid-input\"",
                  "type": "string",
                  "literal": "\"invalid-input\"",
                  "formatted": "\"invalid-input\""
                }
              ],
              "formatted": "\"blur\" | \"input\" | \"submit\" | \"invalid-input\""
            },
            {
              "text": "\"blur lazy\"",
              "type": "string",
              "literal": "\"blur lazy\"",
              "formatted": "\"blur lazy\""
            },
            {
              "text": "\"input lazy\"",
              "type": "string",
              "literal": "\"input lazy\"",
              "formatted": "\"input lazy\""
            },
            {
              "text": "\"submit lazy\"",
              "type": "string",
              "literal": "\"submit lazy\"",
              "formatted": "\"submit lazy\""
            },
            {
              "text": "\"invalid-input lazy\"",
              "type": "string",
              "literal": "\"invalid-input lazy\"",
              "formatted": "\"invalid-input lazy\""
            },
            {
              "text": "\"blur eager\"",
              "type": "string",
              "literal": "\"blur eager\"",
              "formatted": "\"blur eager\""
            },
            {
              "text": "\"input eager\"",
              "type": "string",
              "literal": "\"input eager\"",
              "formatted": "\"input eager\""
            },
            {
              "text": "\"submit eager\"",
              "type": "string",
              "literal": "\"submit eager\"",
              "formatted": "\"submit eager\""
            },
            {
              "text": "\"invalid-input eager\"",
              "type": "string",
              "literal": "\"invalid-input eager\"",
              "formatted": "\"invalid-input eager\""
            },
            {
              "text": "\"lazy blur\"",
              "type": "string",
              "literal": "\"lazy blur\"",
              "formatted": "\"lazy blur\""
            },
            {
              "text": "\"lazy input\"",
              "type": "string",
              "literal": "\"lazy input\"",
              "formatted": "\"lazy input\""
            },
            {
              "text": "\"lazy submit\"",
              "type": "string",
              "literal": "\"lazy submit\"",
              "formatted": "\"lazy submit\""
            },
            {
              "text": "\"lazy invalid-input\"",
              "type": "string",
              "literal": "\"lazy invalid-input\"",
              "formatted": "\"lazy invalid-input\""
            },
            {
              "text": "\"eager blur\"",
              "type": "string",
              "literal": "\"eager blur\"",
              "formatted": "\"eager blur\""
            },
            {
              "text": "\"eager input\"",
              "type": "string",
              "literal": "\"eager input\"",
              "formatted": "\"eager input\""
            },
            {
              "text": "\"eager submit\"",
              "type": "string",
              "literal": "\"eager submit\"",
              "formatted": "\"eager submit\""
            },
            {
              "text": "\"eager invalid-input\"",
              "type": "string",
              "literal": "\"eager invalid-input\"",
              "formatted": "\"eager invalid-input\""
            }
          ],
          "formatted": "\"eager\" | \"lazy\" | \"blur\" | \"input\" | \"submit\" | \"invalid-input\" | \"blur lazy\" | \"input lazy\" | \"submit lazy\" | \"invalid-input lazy\" | \"blur eager\" | \"input eager\" | \"submit eager\" | \"invalid-input eager\" | \"lazy blur\" | \"lazy input\" | \"lazy submit\" | \"lazy invalid-input\" | \"eager blur\" | \"eager input\" | \"eager submit\" | \"eager invalid-input\""
        }
      ],
      "formatted": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
      "optional": false,
      "description": {
        "en": "Change what type of event triggers validation to run."
      },
      "descriptionSource": {
        "en": "validation"
      }
    },
    "validationValue": {
      "text": "any",
      "source": "validation",
      "type": "any",
      "formatted": "any\n",
      "optional": false,
      "description": {
        "en": "The value used when applying validation rules."
      },
      "descriptionSource": {
        "en": "validation"
      }
    },
    "focused": {
      "text": "boolean | undefined",
      "source": "focus",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Forces a focused state styling on the component."
      },
      "descriptionSource": {
        "en": "focus"
      }
    },
    "hideDetails": {
      "text": "boolean | \"auto\" | undefined",
      "source": "VInput",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        },
        {
          "text": "\"auto\"",
          "type": "string",
          "literal": "\"auto\"",
          "formatted": "\"auto\""
        }
      ],
      "formatted": "boolean | 'auto'\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "appendInnerIcon": {
      "text": "IconValue | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "IconValue",
          "source": "vuetify/src/composables/icons.tsx#L12-L15",
          "type": "anyOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "(string | [path: string, opacity: number])[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "[path: string, opacity: number]",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "number",
                      "type": "number",
                      "formatted": "number"
                    }
                  ],
                  "length": 2,
                  "formatted": "[string, number]"
                }
              ],
              "formatted": "(string | [string, number])[]"
            },
            {
              "text": "JSXComponent",
              "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
              "type": "anyOf",
              "items": [
                {
                  "text": "new () => any",
                  "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                  "type": "constructor",
                  "formatted": "new () => any"
                },
                {
                  "text": "FunctionalComponent<any, {}, any, {}>",
                  "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                  "type": "ref",
                  "ref": "FunctionalComponent",
                  "formatted": "FunctionalComponent"
                }
              ],
              "formatted": "(new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
      "optional": false,
      "description": {
        "en": "Creates a [v-icon](/api/v-icon/) component in the **append-inner** slot."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "clearable": {
      "text": "boolean | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": true,
      "description": {
        "en": "Allows for the component to be cleared."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "clearIcon": {
      "text": "IconValue | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "IconValue",
          "source": "vuetify/src/composables/icons.tsx#L12-L15",
          "type": "anyOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "(string | [path: string, opacity: number])[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "[path: string, opacity: number]",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "number",
                      "type": "number",
                      "formatted": "number"
                    }
                  ],
                  "length": 2,
                  "formatted": "[string, number]"
                }
              ],
              "formatted": "(string | [string, number])[]"
            },
            {
              "text": "JSXComponent",
              "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
              "type": "anyOf",
              "items": [
                {
                  "text": "new () => any",
                  "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                  "type": "constructor",
                  "formatted": "new () => any"
                },
                {
                  "text": "FunctionalComponent<any, {}, any, {}>",
                  "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                  "type": "ref",
                  "ref": "FunctionalComponent",
                  "formatted": "FunctionalComponent"
                }
              ],
              "formatted": "(new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
      "optional": false,
      "default": "'$clear'",
      "description": {
        "en": "The icon used when the **clearable** prop is set to true."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "dirty": {
      "text": "boolean | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Manually apply the dirty state styling."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "persistentClear": {
      "text": "boolean | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Always show the clearable icon when the input is dirty (By default it only shows on hover)."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "prependInnerIcon": {
      "text": "IconValue | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "IconValue",
          "source": "vuetify/src/composables/icons.tsx#L12-L15",
          "type": "anyOf",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            },
            {
              "text": "(string | [path: string, opacity: number])[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                },
                {
                  "text": "[path: string, opacity: number]",
                  "type": "array",
                  "items": [
                    {
                      "text": "string",
                      "type": "string",
                      "formatted": "string"
                    },
                    {
                      "text": "number",
                      "type": "number",
                      "formatted": "number"
                    }
                  ],
                  "length": 2,
                  "formatted": "[string, number]"
                }
              ],
              "formatted": "(string | [string, number])[]"
            },
            {
              "text": "JSXComponent",
              "source": "vuetify/src/util/defineComponent.tsx#L331-L333",
              "type": "anyOf",
              "items": [
                {
                  "text": "new () => any",
                  "source": "vuetify/src/util/defineComponent.tsx#L332-L332",
                  "type": "constructor",
                  "formatted": "new () => any"
                },
                {
                  "text": "FunctionalComponent<any, {}, any, {}>",
                  "source": "@vue/runtime-core/dist/runtime-core.d.ts#L1385-L1393",
                  "type": "ref",
                  "ref": "FunctionalComponent",
                  "formatted": "FunctionalComponent"
                }
              ],
              "formatted": "(new () => any) | FunctionalComponent"
            }
          ],
          "formatted": "string | (string | [string, number])[] | (new () => any) | FunctionalComponent"
        }
      ],
      "formatted": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
      "optional": false,
      "description": {
        "en": "Creates a [v-icon](/api/v-icon/) component in the **prepend-inner** slot."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "singleLine": {
      "text": "boolean | undefined",
      "source": "VField",
      "type": "anyOf",
      "items": [
        {
          "text": "undefined",
          "type": "UNSUPPORTED",
          "formatted": "undefined"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "default": false,
      "description": {
        "en": "Label does not move on focus/dirty."
      },
      "descriptionSource": {
        "en": "VField"
      }
    }
  },
  "events": {
    "update:modelValue": {
      "text": "[files: File | File[]]",
      "type": "array",
      "items": [
        {
          "text": "File | File[]",
          "type": "anyOf",
          "items": [
            {
              "text": "File",
              "source": "typescript/lib/lib.dom.d.ts#L2424-L2431",
              "type": "ref",
              "ref": "File",
              "formatted": "File"
            },
            {
              "text": "File[]",
              "source": "typescript/lib/lib.es5.d.ts#L4-L4",
              "type": "array",
              "items": [
                {
                  "text": "File",
                  "source": "typescript/lib/lib.dom.d.ts#L2424-L2431",
                  "type": "ref",
                  "ref": "File",
                  "formatted": "File"
                }
              ],
              "formatted": "File[]"
            }
          ],
          "formatted": "File | File[]"
        }
      ],
      "length": 1,
      "formatted": "[File | File[]]\n",
      "optional": false,
      "description": {
        "en": "Event that is emitted when the component's model changes."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "click:append": {
      "text": "[MouseEvent]",
      "type": "array",
      "items": [
        {
          "text": "MouseEvent",
          "source": "typescript/lib/lib.dom.d.ts#L9825-L9876",
          "type": "ref",
          "ref": "MouseEvent",
          "formatted": "MouseEvent"
        }
      ],
      "length": 1,
      "formatted": "[MouseEvent]\n",
      "optional": false,
      "description": {
        "en": "Emitted when append icon is clicked."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "click:prepend": {
      "text": "[MouseEvent]",
      "type": "array",
      "items": [
        {
          "text": "MouseEvent",
          "source": "typescript/lib/lib.dom.d.ts#L9825-L9876",
          "type": "ref",
          "ref": "MouseEvent",
          "formatted": "MouseEvent"
        }
      ],
      "length": 1,
      "formatted": "[MouseEvent]\n",
      "optional": false,
      "description": {
        "en": "Emitted when prepended icon is clicked."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "update:focused": {
      "text": "[focused: boolean]",
      "type": "array",
      "items": [
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "length": 1,
      "formatted": "[boolean]\n",
      "optional": false,
      "description": {
        "en": "Emitted when the input is focused or blurred"
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "click:clear": {
      "text": "[MouseEvent]",
      "type": "array",
      "items": [
        {
          "text": "MouseEvent",
          "source": "typescript/lib/lib.dom.d.ts#L9825-L9876",
          "type": "ref",
          "ref": "MouseEvent",
          "formatted": "MouseEvent"
        }
      ],
      "length": 1,
      "formatted": "[MouseEvent]\n",
      "optional": false,
      "description": {
        "en": "Emitted when clearable icon clicked."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "click:appendInner": {
      "text": "[MouseEvent]",
      "type": "array",
      "items": [
        {
          "text": "MouseEvent",
          "source": "typescript/lib/lib.dom.d.ts#L9825-L9876",
          "type": "ref",
          "ref": "MouseEvent",
          "formatted": "MouseEvent"
        }
      ],
      "length": 1,
      "formatted": "[MouseEvent]\n",
      "optional": false,
      "description": {
        "en": "Emitted when appended inner icon is clicked."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "click:prependInner": {
      "text": "[MouseEvent]",
      "type": "array",
      "items": [
        {
          "text": "MouseEvent",
          "source": "typescript/lib/lib.dom.d.ts#L9825-L9876",
          "type": "ref",
          "ref": "MouseEvent",
          "formatted": "MouseEvent"
        }
      ],
      "length": 1,
      "formatted": "[MouseEvent]\n",
      "optional": false,
      "description": {
        "en": "Emitted when prepended inner icon is clicked."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "click:control": {
      "text": "[e: MouseEvent]",
      "type": "array",
      "items": [
        {
          "text": "MouseEvent",
          "source": "typescript/lib/lib.dom.d.ts#L9825-L9876",
          "type": "ref",
          "ref": "MouseEvent",
          "formatted": "MouseEvent"
        }
      ],
      "length": 1,
      "formatted": "[MouseEvent]\n",
      "optional": false,
      "description": {
        "en": "Emitted when the main input is clicked."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "mousedown:control": {
      "text": "[e: MouseEvent]",
      "type": "array",
      "items": [
        {
          "text": "MouseEvent",
          "source": "typescript/lib/lib.dom.d.ts#L9825-L9876",
          "type": "ref",
          "ref": "MouseEvent",
          "formatted": "MouseEvent"
        }
      ],
      "length": 1,
      "formatted": "[MouseEvent]\n",
      "optional": false,
      "description": {
        "en": "Event that is emitted when using mousedown on the main control area."
      },
      "descriptionSource": {
        "en": "VFileInput"
      }
    }
  },
  "slots": {
    "default": {
      "text": "VInputSlot & VFieldSlot",
      "type": "allOf",
      "items": [
        {
          "text": "VInputSlot",
          "source": "vuetify/src/components/VInput/VInput.tsx#L26-L38",
          "type": "object",
          "properties": {
            "id": {
              "text": "ComputedRef<string>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<string>",
              "optional": false
            },
            "messagesId": {
              "text": "ComputedRef<string>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<string>",
              "optional": false
            },
            "isDirty": {
              "text": "ComputedRef<boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<boolean>",
              "optional": false
            },
            "isDisabled": {
              "text": "ComputedRef<boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<boolean>",
              "optional": false
            },
            "isReadonly": {
              "text": "ComputedRef<boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<boolean>",
              "optional": false
            },
            "isPristine": {
              "text": "Ref<boolean, boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<boolean, boolean>",
              "optional": false
            },
            "isValid": {
              "text": "ComputedRef<boolean | null>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
              "type": "ref",
              "ref": "ComputedRef",
              "formatted": "ComputedRef<boolean | null>",
              "optional": false
            },
            "isValidating": {
              "text": "Ref<boolean, boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<boolean, boolean>",
              "optional": false
            },
            "reset": {
              "text": "() => void",
              "source": "vuetify/src/components/VInput/VInput.tsx#L35-L35",
              "type": "function",
              "parameters": [],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "() => void",
              "optional": false
            },
            "resetValidation": {
              "text": "() => void",
              "source": "vuetify/src/components/VInput/VInput.tsx#L36-L36",
              "type": "function",
              "parameters": [],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "() => void",
              "optional": false
            },
            "validate": {
              "text": "() => void",
              "source": "vuetify/src/components/VInput/VInput.tsx#L37-L37",
              "type": "function",
              "parameters": [],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "() => void",
              "optional": false
            }
          },
          "formatted": "{ id: ComputedRef<string>; messagesId: ComputedRef<string>; isDirty: ComputedRef<boolean>; isDisabled: ComputedRef<boolean>; isReadonly: ComputedRef<boolean>; isPristine: Ref<boolean, boolean>; isValid: ComputedRef<boolean | null>; isValidating: Ref<boolean, boolean>; reset: () => void; resetValidation: () => void; validate: () => void }"
        },
        {
          "text": "VFieldSlot",
          "source": "vuetify/src/components/VField/VField.tsx#L49-L51",
          "type": "object",
          "properties": {
            "props": {
              "text": "Record<string, unknown>",
              "source": "typescript/lib/lib.es5.d.ts#L6-L6",
              "type": "record",
              "key": {
                "text": "string",
                "type": "string",
                "formatted": "string"
              },
              "value": {
                "text": "unknown",
                "type": "unknown",
                "formatted": "unknown"
              },
              "formatted": "Record<string, unknown>",
              "optional": false
            },
            "isActive": {
              "text": "Ref<boolean, boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<boolean, boolean>",
              "optional": false
            },
            "isFocused": {
              "text": "Ref<boolean, boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<boolean, boolean>",
              "optional": false
            },
            "controlRef": {
              "text": "Ref<HTMLElement | undefined, HTMLElement | undefined>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<HTMLElement | undefined, HTMLElement | undefined>",
              "optional": false
            },
            "focus": {
              "text": "() => void",
              "source": "vuetify/src/components/VField/VField.tsx#L45-L45",
              "type": "function",
              "parameters": [],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "() => void",
              "optional": false
            },
            "blur": {
              "text": "() => void",
              "source": "vuetify/src/components/VField/VField.tsx#L46-L46",
              "type": "function",
              "parameters": [],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "() => void",
              "optional": false
            }
          },
          "formatted": "{ props: Record<string, unknown>; isActive: Ref<boolean, boolean>; isFocused: Ref<boolean, boolean>; controlRef: Ref<HTMLElement | undefined, HTMLElement | undefined>; focus: () => void; blur: () => void }"
        }
      ],
      "formatted": "{\n  id: ComputedRef<string>\n  messagesId: ComputedRef<string>\n  isDirty: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean, boolean>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean, boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n} & {\n  props: Record<string, unknown>\n  isActive: Ref<boolean, boolean>\n  isFocused: Ref<boolean, boolean>\n  controlRef: Ref<HTMLElement | undefined, HTMLElement | undefined>\n  focus: () => void\n  blur: () => void\n}\n",
      "optional": false,
      "description": {
        "en": "The default Vue slot."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "prepend": {
      "text": "VInputSlot",
      "source": "vuetify/src/components/VInput/VInput.tsx#L26-L38",
      "type": "object",
      "properties": {
        "id": {
          "text": "ComputedRef<string>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<string>",
          "optional": false
        },
        "messagesId": {
          "text": "ComputedRef<string>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<string>",
          "optional": false
        },
        "isDirty": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isDisabled": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isReadonly": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isPristine": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "isValid": {
          "text": "ComputedRef<boolean | null>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean | null>",
          "optional": false
        },
        "isValidating": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "reset": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L35-L35",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "resetValidation": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L36-L36",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "validate": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L37-L37",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        }
      },
      "formatted": "{\n  id: ComputedRef<string>\n  messagesId: ComputedRef<string>\n  isDirty: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean, boolean>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean, boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n}\n",
      "optional": false,
      "description": {
        "en": "Adds an item outside the input and before input content."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "append": {
      "text": "VInputSlot",
      "source": "vuetify/src/components/VInput/VInput.tsx#L26-L38",
      "type": "object",
      "properties": {
        "id": {
          "text": "ComputedRef<string>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<string>",
          "optional": false
        },
        "messagesId": {
          "text": "ComputedRef<string>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<string>",
          "optional": false
        },
        "isDirty": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isDisabled": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isReadonly": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isPristine": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "isValid": {
          "text": "ComputedRef<boolean | null>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean | null>",
          "optional": false
        },
        "isValidating": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "reset": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L35-L35",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "resetValidation": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L36-L36",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "validate": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L37-L37",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        }
      },
      "formatted": "{\n  id: ComputedRef<string>\n  messagesId: ComputedRef<string>\n  isDirty: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean, boolean>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean, boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n}\n",
      "optional": false,
      "description": {
        "en": "Adds an item inside the input and after input content."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "details": {
      "text": "VInputSlot",
      "source": "vuetify/src/components/VInput/VInput.tsx#L26-L38",
      "type": "object",
      "properties": {
        "id": {
          "text": "ComputedRef<string>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<string>",
          "optional": false
        },
        "messagesId": {
          "text": "ComputedRef<string>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<string>",
          "optional": false
        },
        "isDirty": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isDisabled": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isReadonly": {
          "text": "ComputedRef<boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean>",
          "optional": false
        },
        "isPristine": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "isValid": {
          "text": "ComputedRef<boolean | null>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L355-L357",
          "type": "ref",
          "ref": "ComputedRef",
          "formatted": "ComputedRef<boolean | null>",
          "optional": false
        },
        "isValidating": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "reset": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L35-L35",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "resetValidation": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L36-L36",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "validate": {
          "text": "() => void",
          "source": "vuetify/src/components/VInput/VInput.tsx#L37-L37",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        }
      },
      "formatted": "{\n  id: ComputedRef<string>\n  messagesId: ComputedRef<string>\n  isDirty: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean, boolean>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean, boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n}\n",
      "optional": false,
      "description": {
        "en": "Slot for custom input details to modifying the display of [messages](#props-messages)."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "message": {
      "text": "VMessageSlot",
      "source": "vuetify/src/components/VMessages/VMessages.tsx#L19-L21",
      "type": "object",
      "properties": {
        "message": {
          "text": "string",
          "type": "string",
          "formatted": "string",
          "optional": false
        }
      },
      "formatted": "{ message: string }\n",
      "optional": false,
      "description": {
        "en": "Slot used to customize the message content."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "clear": {
      "text": "DefaultInputSlot & { props: Record<string, any>; }",
      "type": "allOf",
      "items": [
        {
          "text": "DefaultInputSlot",
          "source": "vuetify/src/components/VField/VField.tsx#L41-L47",
          "type": "object",
          "properties": {
            "isActive": {
              "text": "Ref<boolean, boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<boolean, boolean>",
              "optional": false
            },
            "isFocused": {
              "text": "Ref<boolean, boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<boolean, boolean>",
              "optional": false
            },
            "controlRef": {
              "text": "Ref<HTMLElement | undefined, HTMLElement | undefined>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<HTMLElement | undefined, HTMLElement | undefined>",
              "optional": false
            },
            "focus": {
              "text": "() => void",
              "source": "vuetify/src/components/VField/VField.tsx#L45-L45",
              "type": "function",
              "parameters": [],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "() => void",
              "optional": false
            },
            "blur": {
              "text": "() => void",
              "source": "vuetify/src/components/VField/VField.tsx#L46-L46",
              "type": "function",
              "parameters": [],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "() => void",
              "optional": false
            }
          },
          "formatted": "{ isActive: Ref<boolean, boolean>; isFocused: Ref<boolean, boolean>; controlRef: Ref<HTMLElement | undefined, HTMLElement | undefined>; focus: () => void; blur: () => void }"
        },
        {
          "text": "{ props: Record<string, any>; }",
          "source": "vuetify/src/components/VField/VField.tsx#L99-L99",
          "type": "object",
          "properties": {
            "props": {
              "text": "Record<string, any>",
              "source": "typescript/lib/lib.es5.d.ts#L6-L6",
              "type": "record",
              "key": {
                "text": "string",
                "type": "string",
                "formatted": "string"
              },
              "value": {
                "text": "any",
                "type": "any",
                "formatted": "any"
              },
              "formatted": "Record<string, any>",
              "optional": false
            }
          },
          "formatted": "{ props: Record<string, any> }"
        }
      ],
      "formatted": "{\n  isActive: Ref<boolean, boolean>\n  isFocused: Ref<boolean, boolean>\n  controlRef: Ref<HTMLElement | undefined, HTMLElement | undefined>\n  focus: () => void\n  blur: () => void\n} & { props: Record<string, any> }\n",
      "optional": false,
      "description": {
        "en": "Slot for custom clear icon (displayed when the **clearable** prop is equal to true)."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "prepend-inner": {
      "text": "DefaultInputSlot",
      "source": "vuetify/src/components/VField/VField.tsx#L41-L47",
      "type": "object",
      "properties": {
        "isActive": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "isFocused": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "controlRef": {
          "text": "Ref<HTMLElement | undefined, HTMLElement | undefined>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<HTMLElement | undefined, HTMLElement | undefined>",
          "optional": false
        },
        "focus": {
          "text": "() => void",
          "source": "vuetify/src/components/VField/VField.tsx#L45-L45",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "blur": {
          "text": "() => void",
          "source": "vuetify/src/components/VField/VField.tsx#L46-L46",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        }
      },
      "formatted": "{\n  isActive: Ref<boolean, boolean>\n  isFocused: Ref<boolean, boolean>\n  controlRef: Ref<HTMLElement | undefined, HTMLElement | undefined>\n  focus: () => void\n  blur: () => void\n}\n",
      "optional": false,
      "description": {
        "en": "Slot that is prepended to the input."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "append-inner": {
      "text": "DefaultInputSlot",
      "source": "vuetify/src/components/VField/VField.tsx#L41-L47",
      "type": "object",
      "properties": {
        "isActive": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "isFocused": {
          "text": "Ref<boolean, boolean>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<boolean, boolean>",
          "optional": false
        },
        "controlRef": {
          "text": "Ref<HTMLElement | undefined, HTMLElement | undefined>",
          "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
          "type": "ref",
          "ref": "Ref",
          "formatted": "Ref<HTMLElement | undefined, HTMLElement | undefined>",
          "optional": false
        },
        "focus": {
          "text": "() => void",
          "source": "vuetify/src/components/VField/VField.tsx#L45-L45",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        },
        "blur": {
          "text": "() => void",
          "source": "vuetify/src/components/VField/VField.tsx#L46-L46",
          "type": "function",
          "parameters": [],
          "returnType": {
            "text": "void",
            "type": "void",
            "formatted": "void"
          },
          "formatted": "() => void",
          "optional": false
        }
      },
      "formatted": "{\n  isActive: Ref<boolean, boolean>\n  isFocused: Ref<boolean, boolean>\n  controlRef: Ref<HTMLElement | undefined, HTMLElement | undefined>\n  focus: () => void\n  blur: () => void\n}\n",
      "optional": false,
      "description": {
        "en": "Slot that is appended to the input."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "label": {
      "text": "DefaultInputSlot & { label: string | undefined; props: Record<string, any>; }",
      "type": "allOf",
      "items": [
        {
          "text": "DefaultInputSlot",
          "source": "vuetify/src/components/VField/VField.tsx#L41-L47",
          "type": "object",
          "properties": {
            "isActive": {
              "text": "Ref<boolean, boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<boolean, boolean>",
              "optional": false
            },
            "isFocused": {
              "text": "Ref<boolean, boolean>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<boolean, boolean>",
              "optional": false
            },
            "controlRef": {
              "text": "Ref<HTMLElement | undefined, HTMLElement | undefined>",
              "source": "@vue/reactivity/dist/reactivity.d.ts#L419-L428",
              "type": "ref",
              "ref": "Ref",
              "formatted": "Ref<HTMLElement | undefined, HTMLElement | undefined>",
              "optional": false
            },
            "focus": {
              "text": "() => void",
              "source": "vuetify/src/components/VField/VField.tsx#L45-L45",
              "type": "function",
              "parameters": [],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "() => void",
              "optional": false
            },
            "blur": {
              "text": "() => void",
              "source": "vuetify/src/components/VField/VField.tsx#L46-L46",
              "type": "function",
              "parameters": [],
              "returnType": {
                "text": "void",
                "type": "void",
                "formatted": "void"
              },
              "formatted": "() => void",
              "optional": false
            }
          },
          "formatted": "{ isActive: Ref<boolean, boolean>; isFocused: Ref<boolean, boolean>; controlRef: Ref<HTMLElement | undefined, HTMLElement | undefined>; focus: () => void; blur: () => void }"
        },
        {
          "text": "{ label: string | undefined; props: Record<string, any>; }",
          "source": "vuetify/src/components/VField/VField.tsx#L102-L102",
          "type": "object",
          "properties": {
            "label": {
              "text": "string | undefined",
              "type": "anyOf",
              "items": [
                {
                  "text": "undefined",
                  "type": "UNSUPPORTED",
                  "formatted": "undefined"
                },
                {
                  "text": "string",
                  "type": "string",
                  "formatted": "string"
                }
              ],
              "formatted": "string",
              "optional": false
            },
            "props": {
              "text": "Record<string, any>",
              "source": "typescript/lib/lib.es5.d.ts#L6-L6",
              "type": "record",
              "key": {
                "text": "string",
                "type": "string",
                "formatted": "string"
              },
              "value": {
                "text": "any",
                "type": "any",
                "formatted": "any"
              },
              "formatted": "Record<string, any>",
              "optional": false
            }
          },
          "formatted": "{ label: string; props: Record<string, any> }"
        }
      ],
      "formatted": "{\n  isActive: Ref<boolean, boolean>\n  isFocused: Ref<boolean, boolean>\n  controlRef: Ref<HTMLElement | undefined, HTMLElement | undefined>\n  focus: () => void\n  blur: () => void\n} & { label: string; props: Record<string, any> }\n",
      "optional": false,
      "description": {
        "en": "The default slot of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
      },
      "descriptionSource": {
        "en": "VField"
      }
    },
    "loader": {
      "text": "LoaderSlotProps",
      "source": "vuetify/src/composables/loader.tsx#L12-L15",
      "type": "object",
      "properties": {
        "color": {
          "text": "string | undefined",
          "type": "anyOf",
          "items": [
            {
              "text": "undefined",
              "type": "UNSUPPORTED",
              "formatted": "undefined"
            },
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            }
          ],
          "formatted": "string",
          "optional": false
        },
        "isActive": {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean",
          "optional": false
        }
      },
      "formatted": "{ color: string; isActive: boolean }\n",
      "optional": false,
      "description": {
        "en": "Slot for custom loader (displayed when [loading](#props-loading) prop is equal to true)."
      },
      "descriptionSource": {
        "en": "generic"
      }
    },
    "counter": {
      "text": "never",
      "type": "never",
      "formatted": "never\n",
      "optional": false,
      "description": {
        "en": "Slot for the input’s counter text."
      },
      "descriptionSource": {
        "en": "VFileInput"
      }
    },
    "selection": {
      "text": "{ fileNames: string[]; totalBytes: number; totalBytesReadable: string; }",
      "source": "vuetify/src/components/VFileInput/VFileInput.tsx#L36-L40",
      "type": "object",
      "properties": {
        "fileNames": {
          "text": "string[]",
          "source": "typescript/lib/lib.es5.d.ts#L4-L4",
          "type": "array",
          "items": [
            {
              "text": "string",
              "type": "string",
              "formatted": "string"
            }
          ],
          "formatted": "string[]",
          "optional": false
        },
        "totalBytes": {
          "text": "number",
          "type": "number",
          "formatted": "number",
          "optional": false
        },
        "totalBytesReadable": {
          "text": "string",
          "type": "string",
          "formatted": "string",
          "optional": false
        }
      },
      "formatted": "{\n  fileNames: string[]\n  totalBytes: number\n  totalBytesReadable: string\n}\n",
      "optional": false,
      "description": {
        "en": "Slot for defining a custom appearance for selected item(s). Provides the current **index**, **text** (truncated) and [file](https://developer.mozilla.org/en-US/docs/Web/API/File)."
      },
      "descriptionSource": {
        "en": "VFileInput"
      }
    }
  },
  "exposed": {
    "reset": {
      "text": "() => Promise<void>",
      "source": "vuetify/src/composables/validation.ts#L182-L186",
      "type": "function",
      "parameters": [],
      "returnType": {
        "text": "Promise<void>",
        "source": "typescript/lib/lib.es5.d.ts#L4-L4",
        "type": "ref",
        "ref": "Promise",
        "formatted": "Promise<void>"
      },
      "formatted": "() => Promise<void>\n",
      "optional": false,
      "description": {
        "en": "Resets the input value."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "resetValidation": {
      "text": "() => Promise<void>",
      "source": "vuetify/src/composables/validation.ts#L188-L195",
      "type": "function",
      "parameters": [],
      "returnType": {
        "text": "Promise<void>",
        "source": "typescript/lib/lib.es5.d.ts#L4-L4",
        "type": "ref",
        "ref": "Promise",
        "formatted": "Promise<void>"
      },
      "formatted": "() => Promise<void>\n",
      "optional": false,
      "description": {
        "en": "Resets validation of the input without modifying its value."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "validate": {
      "text": "(silent?: boolean) => Promise<string[]>",
      "source": "vuetify/src/composables/validation.ts#L197-L227",
      "type": "function",
      "parameters": [
        {
          "name": "silent",
          "optional": false,
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "returnType": {
        "text": "Promise<string[]>",
        "source": "typescript/lib/lib.es5.d.ts#L4-L4",
        "type": "ref",
        "ref": "Promise",
        "formatted": "Promise<string[]>"
      },
      "formatted": "(silent: boolean) => Promise<string[]>\n",
      "optional": false,
      "description": {
        "en": "Validates the input's value."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "isValid": {
      "text": "boolean | null",
      "type": "anyOf",
      "items": [
        {
          "text": "null",
          "type": "UNSUPPORTED",
          "formatted": "null"
        },
        {
          "text": "boolean",
          "type": "boolean",
          "formatted": "boolean"
        }
      ],
      "formatted": "boolean\n",
      "optional": false,
      "description": {
        "en": "Boolean indicating if the input is valid."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    },
    "errorMessages": {
      "text": "string[]",
      "source": "typescript/lib/lib.es5.d.ts#L4-L4",
      "type": "array",
      "items": [
        {
          "text": "string",
          "type": "string",
          "formatted": "string"
        }
      ],
      "formatted": "string[]\n",
      "optional": false,
      "description": {
        "en": "An array of error messages that were set by the `setErrors` method."
      },
      "descriptionSource": {
        "en": "VInput"
      }
    }
  },
  "sass": {
    "$file-input-chip-margin-inline-end": {
      "default": "null"
    },
    "$file-input-chips-margin-bottom": {
      "default": "null"
    },
    "$file-input-chips-margin-top": {
      "default": "null"
    },
    "$file-input-details-padding-inline": {
      "default": "16px"
    }
  }
}